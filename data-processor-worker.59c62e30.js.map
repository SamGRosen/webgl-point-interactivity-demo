{"version":3,"sources":["../node_modules/kdbush/src/sort.js","../node_modules/kdbush/src/range.js","../node_modules/kdbush/src/within.js","../node_modules/kdbush/src/index.js","../node_modules/supercluster/index.js","../node_modules/@turf/helpers/dist/es/index.js","../node_modules/@turf/invariant/dist/es/index.js","../node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","scripts/data-processor.js","scripts/data-processor-worker.js"],"names":["sortKD","ids","coords","nodeSize","left","right","depth","m","select","k","inc","n","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swapItem","swap","arr","tmp","range","minX","minY","maxX","maxY","stack","length","result","x","y","axis","pop","push","nextAxis","within","qx","qy","r","r2","sqDist","ax","ay","bx","by","dx","dy","defaultGetX","p","defaultGetY","KDBush","constructor","points","getX","getY","ArrayType","Float64Array","IndexArrayType","Uint16Array","Uint32Array","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","generateId","reduce","map","props","fround","Float32Array","Supercluster","options","extend","Object","create","trees","Array","load","console","time","timerId","clusters","geometry","createPointCluster","timeEnd","now","Date","_cluster","getClusters","bbox","zoom","minLng","minLat","maxLng","maxLat","easternHem","westernHem","concat","tree","_limitZoom","lngX","latY","id","c","numPoints","getClusterJSON","index","getChildren","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","Error","origin","pow","children","parentId","getLeaves","limit","offset","leaves","_appendLeaves","getTile","z2","top","bottom","tile","features","_addTileFeatures","getClusterExpansionZoom","expansionZoom","properties","cluster_id","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","coordinates","f","type","round","undefined","neighborIds","numPointsOrigin","neighborId","b","wx","wy","clusterProperties","_map","numPoints2","createCluster","point","clone","original","Infinity","xLng","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","dest","src","earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","hectares","feature","geom","feat","_options","lineString","polygon","multiPoint","multiLineString","multiPolygon","isArray","isNumber","featureCollection","_i","coordinates_1","ring","polygons","lineStrings","fc","geometryCollection","geometries","num","precision","multiplier","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","isNaN","isObject","input","validateBBox","forEach","validateId","indexOf","getCoord","coord","getCoords","containsNumber","geojsonType","value","name","featureOf","collectionOf","_a","getGeom","geojson","getType","_name","booleanPointInPolygon","pt","polys","inBBox","insidePoly","inRing","ignoreBoundary","inHole","isInside","slice","xi","yi","xj","yj","onBoundary","intersect","DataProcessor","data","split","line","parts","parseFloat","sample","smallerX","smallerY","largerX","largerY","smallestX","Number","MAX_VALUE","largestX","MIN_VALUE","smallestY","largestY","polygonPoints","candidatePoints","boundingPolygon","filter","self","onmessage","message","processor","selectBox","selectLasso","error"],"mappings":"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","file":"data-processor-worker.59c62e30.js","sourceRoot":"../src","sourcesContent":["\nexport default function sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) return;\n\n    const m = (left + right) >> 1;\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        const t = coords[2 * k + inc];\n        let i = left;\n        let j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) i++;\n            while (coords[2 * j + inc] > t) j--;\n        }\n\n        if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n","\nexport default function range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    const stack = [0, ids.length - 1, 0];\n    const result = [];\n    let x, y;\n\n    while (stack.length) {\n        const axis = stack.pop();\n        const right = stack.pop();\n        const left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (let i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        const m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n\n        const nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n","\nexport default function within(ids, coords, qx, qy, r, nodeSize) {\n    const stack = [0, ids.length - 1, 0];\n    const result = [];\n    const r2 = r * r;\n\n    while (stack.length) {\n        const axis = stack.pop();\n        const right = stack.pop();\n        const left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (let i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        const m = Math.floor((left + right) / 2);\n\n        const x = coords[2 * m];\n        const y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n\n        const nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n","\nimport sort from './sort';\nimport range from './range';\nimport within from './within';\n\nconst defaultGetX = p => p[0];\nconst defaultGetY = p => p[1];\n\nexport default class KDBush {\n    constructor(points, getX = defaultGetX, getY = defaultGetY, nodeSize = 64, ArrayType = Float64Array) {\n        this.nodeSize = nodeSize;\n        this.points = points;\n\n        const IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;\n\n        const ids = this.ids = new IndexArrayType(points.length);\n        const coords = this.coords = new ArrayType(points.length * 2);\n\n        for (let i = 0; i < points.length; i++) {\n            ids[i] = i;\n            coords[2 * i] = getX(points[i]);\n            coords[2 * i + 1] = getY(points[i]);\n        }\n\n        sort(ids, coords, nodeSize, 0, ids.length - 1, 0);\n    }\n\n    range(minX, minY, maxX, maxY) {\n        return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n    }\n\n    within(x, y, r) {\n        return within(this.ids, this.coords, x, y, r, this.nodeSize);\n    }\n}\n","\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            if (numPoints >= minPoints) { // enough points to form a cluster\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import Supercluster from \"supercluster\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { polygon } from \"@turf/helpers\";\n\nclass DataProcessor {\n  constructor(data) {\n    this.index = new Supercluster();\n    this.points = [];\n    // specific to t-SNE\n\n    console.log(\"Reading data...\");\n    data.split(\"\\n\").forEach((line) => {\n      const parts = line.split(\",\");\n      const x = parseFloat(parts[1]);\n      const y = parseFloat(parts[2]);\n      if (!parts[0] || isNaN(x) || isNaN(y)) {\n        return;\n      }\n      this.points.push({\n        geometry: {\n          coordinates: [x, y],\n          sample: parts[0],\n        },\n      });\n    });\n\n    console.log(\"Indexing data...\");\n    this.index.load(this.points);\n\n    console.log(\"Data ready.\");\n  }\n\n  selectBox(points, zoom = 16) {\n    const smallerX = Math.min(points[0], points[2]);\n    const smallerY = Math.min(points[1], points[3]);\n    const largerX = Math.max(points[0], points[2]);\n    const largerY = Math.max(points[1], points[3]);\n\n    console.log(\n      this.index.getClusters([smallerX, smallerY, largerX, largerY], zoom)\n    );\n  }\n\n  selectLasso(points, zoom = 16) {\n    let smallestX = Number.MAX_VALUE;\n    let largestX = Number.MIN_VALUE;\n    let smallestY = Number.MAX_VALUE;\n    let largestY = Number.MIN_VALUE;\n    const polygonPoints = [];\n    for (let i = 0; i < points.length; i += 2) {\n      if (points[i] < smallestX) smallestX = points[i];\n      if (points[i] > largestX) largestX = points[i];\n      if (points[i + 1] < smallestY) smallestY = points[i + 1];\n      if (points[i + 1] > largestY) largestY = points[i + 1];\n      polygonPoints.push([points[i], points[i + 1]]);\n    }\n\n    polygonPoints.push([...polygonPoints[0]]); // First and last must be same position\n\n    const candidatePoints = this.index.getClusters(\n      [smallestX, smallestY, largestX, largestY],\n      zoom\n    );\n    const boundingPolygon = polygon([polygonPoints]);\n\n    console.log(\n      candidatePoints.filter((point) => {\n        return booleanPointInPolygon(\n          point.geometry.coordinates,\n          boundingPolygon\n        );\n      })\n    );\n  }\n}\n\nexport default DataProcessor;\n","import DataProcessor from \"./data-processor\";\n\nself.onmessage = (message) => {\n  switch (message.data.type) {\n    case \"init\":\n      self.processor = new DataProcessor(message.data.data);\n      break;\n    case \"selectBox\":\n      self.processor.selectBox(message.data.points);\n      break;\n    case \"selectLasso\":\n      self.processor.selectLasso(message.data.points);\n      break;\n    default:\n      console.error(`Received unknown message type: ${message.type}`);\n  }\n};\n"]}