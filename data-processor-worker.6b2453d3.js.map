{"version":3,"sources":["../../node_modules/kdbush/src/sort.js","../../node_modules/kdbush/src/range.js","../../node_modules/kdbush/src/within.js","../../node_modules/kdbush/src/index.js","../../node_modules/supercluster/index.js","../scripts/data-processor.js","../scripts/data-processor-worker.js"],"names":["sortKD","ids","coords","nodeSize","left","right","depth","m","select","k","inc","n","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swapItem","swap","arr","tmp","range","minX","minY","maxX","maxY","stack","length","result","x","y","axis","pop","push","nextAxis","within","qx","qy","r","r2","sqDist","ax","ay","bx","by","dx","dy","defaultGetX","p","defaultGetY","KDBush","constructor","points","getX","getY","ArrayType","Float64Array","IndexArrayType","Uint16Array","Uint32Array","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","generateId","reduce","map","props","fround","Float32Array","Supercluster","options","extend","Object","create","trees","Array","load","console","time","timerId","clusters","geometry","createPointCluster","timeEnd","now","Date","_cluster","getClusters","bbox","zoom","minLng","minLat","maxLng","maxLat","easternHem","westernHem","concat","tree","_limitZoom","lngX","latY","id","c","numPoints","getClusterJSON","index","getChildren","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","Error","origin","pow","children","parentId","getLeaves","limit","offset","leaves","_appendLeaves","getTile","z2","top","bottom","tile","features","_addTileFeatures","getClusterExpansionZoom","expansionZoom","properties","cluster_id","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","coordinates","f","type","round","undefined","neighborIds","numPointsOrigin","neighborId","b","wx","wy","clusterProperties","_map","numPoints2","createCluster","point","clone","original","Infinity","xLng","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","dest","src","DataProcessor","data","split","forEach","line","parts","parseFloat","isNaN","sample","smallerX","smallerY","largerX","largerY","self","onmessage","message","processor","selectBox","selectLasso","error","e"],"mappings":";;AMAA;;;;AAEAyM,IAAI,CAACC,SAAL,GAAiB,UAACC,OAAD,EAAa;AHD9B,AFAe,ADAA,AEAA,AEAf,AEEE,ADHF,SJCwB5K,ADAA/B,AEAA6C,CIEd8J,ILFK,CAAe1M,ADAf,AEAA,CFAgBA,AEAAA,CIEd,CLFF,AKEG4L,CNFH,AEAA,CDAoB3L,CDACA,AEAAA,CIE1B,CAAa4J,GLFR,CDAA,AEAA,AIEb,CLFyC9H,CDAC7B,AEAA2C,EAA7B,CDAA,CCAiCC,CDACd,CCAlC,EFAA,AEAqCe,CDArC,ACAA,CFAuC5C,CCAC8B,ACAA/B,GFAxC,CCAA,CDA6CE,CCAC8B,ECA9C,EDAA,ADAA,AEAkD,EDAEhC,ADAAG,KAApD,EAA2D,CCA3D,EAA8D;AACzE,ADAA,AEAA,AIEA,MNFID,ECAE+B,ACAAA,CIED,ENFI,ECAE,ACAA,CFAChC,CMEZ,CLFc,ACAA,CDAC,ACAA,CDAD,ADAV,AEAU,EDAIH,ACAAA,EFAEE,CCAC,ACAA,CDACkC,ACAAA,MDAJ,ADAlB,AEAkB,EFAY,CCAC,ACAA,CDAjB,ACAA,EDAoB,ACAA,CDApB,ACAA,CDAd,ACAA;ACAJ,AFCI,ADCA,AEDA,AIEEoK,MAAAA,ELFInK,ADCA/B,AEDA+B,CFCC,CMCD,CAACsK,CNDIxM,ECDC,ACAA,EFCG,CCDA,ACAA,EDAf,ADCkBC,AEDlB,CIEE,GAAiB,CNDT,GMCauL,CNDK,CAA5B,oBMCmB,CAAkBe,OAAO,CAACd,IAAR,CAAaA,IAA/B,CAAjB;ALDF,ADEArL,AEFA,AIEE,ENAFA,ICFI+B,CAAJ,CDEM,AEFAU,CDACT,ADEAvC,CCFP,ACAQ,EFEF,CEFK+C,CFEC9C,AEFA,GAAG8C,CAAf,EFEM,EAAczC,CAAd,EAAiBH,IAAjB,EAAuBC,KAAvB,EAA8BC,KAAK,GAAG,CAAtC,CAAN;AGHJ,AHKIN,AILJ,EJKIA,IILEsE,EJKI,CAACrE,GAAD,EAAMC,MAAN,AILU,EJKIC,CILD,OJKb,EAAwBC,IAAxB,EAA8BG,CAAC,GAAG,CAAlC,EAAqCD,KAAK,GAAG,CAA7C,CAAN;ACFA,ADGAN,AEHA,AEFAuE,AEGA,ENEAvE,AILAuE,MJKM,CCHCnC,ADGAnC,AEHAmC,AEFA,AEGF,EFHI,CJKH,AINa,EHGP,ADGAlC,AEHA,CDACmC,ACAAA,KFGP,AMFN,CLDA,ACAA,CFGoBlC,CCHC,ACAA,OFGf,EAAwBI,CAAC,GAAG,CAA5B,EAA+BF,KAA/B,EAAsCC,KAAK,GAAG,CAA9C,CAAN;ACFI,ADGP,AEHO,AEHU,AEIZmM,MAAAA,ILDQhK,ACAAA,AICJ,CAACmK,GLDO,ACAA,GDAGxK,ACAAA,GICf,CAAeyK,CLDK,ACAA,CDACnK,ACAAA,GDAN,ACAA,EDAb,ACAA,EICF,CAAyBiK,OAAO,CAACd,IAAR,CAAa/H,MAAtC;ALAE,ACAA,AEHJU,AEIE,EFJFA,OAAO,CHGGnE,ACAAA,CEHD,EAFU,EHKJ,ACAA,GDAG+B,ACAAA,KDAK,ACAA,CDACM,ACAAA,GDAN,ACAA,EDAd,ACAA;ACHR,AFIQ,ADGR,AEHQ,AEJU,MDAZe,GHOGjD,CCHKJ,ACAAA,IDAI,ACAA,CFGlB,CAAgBH,CGPC,AFIImC,ACAAA,EFGrB,CGPoBsB,CAAC,AHOAxD,CCHK,ACAA,CDACwC,ACAAA,ECJFgB,CAAC,AFIL,ACAA,CCJM,AHO3B,CGP0B,AFIlB,ACAA,CCJR,AHO6BjD,CAA7B,EAAgCL,IAAhC,EAAsCC,KAAtC,EAA6CK,GAA7C,EAAkD;AAE9C,AIRA+D,AEIA,EFJAA,OJQOpE,AMJF,EFJI,EAAE,CJQC,AIXO,GJWJD,IAAf,CMJA,CNIqB;AGRzB,AFKQ,ADIA,AEJA,AELU,AEKZqM,IDTAb,EFIAjI,AGKA8I,ELAMpM,ADIAA,AEJAA,EIAF,CAACuM,ELAM,ADIA,AEJA,GDAGxM,ADIAA,AEJAA,CCLH,GAAGsD,AFKR,ADIA,AEJA,AIAN,CHLe,AGKAoJ,ENIM,CCJC3M,ACAAA,CCLHuD,CAAC,AHSlB,CGTmB,CAAD,AHSM,CGThC,GFKQ,ACAA,AIAF,CAA2BiJ,CLAK,ACAA,MIAE,CAACd,IAAnC;ALCM,ADIA,AEJA,AELRnH,EAAAA,MAAM,EAAE,CHKK,ACAA,CFIC/D,AIbK,CJaJ,ECJEc,ACAAA,CDAC,ADIApB,AEJA,GDAGD,ACAAA,EFIE,ECJf,ACAA,CFIkBA,CCJCqB,ACAAA,CDAC,ACAA,EFIV,ECJcpB,ACAAA,CFIC,CAAzB,GCJA,ACAA,EDA+BoB,ACAAA,CDAC,ACAA,EDAhC,ACAA,EDAoC,ACAA;ACJjC,AFKCc,ADIJ,AEJI,AENE,AEKd,MHJiBqB,EFKLrB,CAAC,GELF,AFKKrC,ADIFK,AEJE2C,CCLQ,AHST,GAAGzC,CAAC,CCJG,ACAA,CDAC,ACAAP,CFIDE,GCJKqB,CAAL,ADIJ,CCJN,ACAiB,CAAC,CFID,CAArB,EEJ0BA,CAAL,CAAP,EAAgBvB,MAAM,CAAC,IAAIuB,CAAJ,GAAQ,CAAT,CAAtB,EAAmCqB,EAAnC,EAAuCC,EAAvC,CAAN,IAAoDE,EAAxD,EAA4DX,MAAM,CAACK,IAAP,CAAY1C,GAAG,CAACwB,CAAD,CAAf;ACJxEoC,AFKYrB,ADIJ,AEJC,AENTmC,AEKEe,ADVJ,EFME7B,ACDAc,IEKEe,ELCUlD,AGNN,CHMO,CGNL,EHMQtC,ADIFU,CGTH,AHSI,AIfI,AEUV,CHJGkD,AGIFiJ,ENKQlM,ECJI,CAAC,AKDrB,CHJS,AHSW,CAACC,CGTHiD,CFKOtC,CAAJ,ADIL,CAASd,AKfjBkL,CFMc,AHSN,CCJa,ADIvB,CCJc,CELKpI,AFKf,AIXd,EAAkB,SFML,EAA6BO,IAAI,GAAGL,WAApC,CGIuCqJ,CHJU7M,AGI1D,QHJkE,GAAG,EAA5D,EAAgE8D,SAAS,GAAGC,YAA5E,EAA0F;AACjG,AFKQ,ADIJ,AIXM,AELhB,ADAkB,SFOP/D,GFKOoC,ADIFxB,CCJG,ADIF,GAAG,CGTd,AFKiBiB,GELD7B,CFKJ,CDIQU,GCJK0B,CAAC,ADIF,CAACvB,CGTzB,EFK8BkB,ADIV,CAAS,GCJjB,CDIqBtB,CAAJ,ECJS4B,CAAC,ADIF,CAAjB,CAAhB,ECJuCP,IAA/B,IAAuCO,CAAC,IAAIL,IAAhD,EAAsDG,MAAM,CAACK,IAAP,CAAY1C,GAAG,CAACwB,CAAD,CAAf;AEJ9D,AFKK,ADID,AELA,AENRtB,AEMH,CAbD,CFOIA,ODES2D,CCFD,EJWM7C,AIXJ,EJWM,AIjBG,CDQf,EHSe,CGTD6C,KHSOjD,CGTrB,GHSyB,CAACK,IAAL,CAAUN,CAAC,GAAGG,CAAJ,IAASJ,CAAC,GAAGI,CAAb,IAAkBJ,CAA5B,CAAN,IAAwCJ,CAAC,GAAGI,CAAC,GAAG,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAAjB,GAAqB,CAA7D,CAAX;AGPJ,AHQI,AELH,AEPS,ACNE,UFUNwD,EHQIhD,OAAO,GAAGN,EGRA,EHQI,CGRDiD,AHQE1C,GAAL,CAAShB,EGRA,CAACiC,CHQV,EAAexB,GGRZ,CHQgB,CAACQ,CGRD,IHQJ,CGRZ,AHQuBZ,CAAC,EGRA2D,CHQG7D,CAAC,GAAGQ,CAAJ,GAAQJ,CAAZ,CGRvB,EHQuCM,CGRDoD,CHQ1B,CAAf,CAAhB,QGRJ;AAEA,AFEI,ADKA,AIZRvD,EAAAA,GAAG,EAAE,GDKKb,EHOIqB,AInBK,CDYN,GAAG,IHOM,CGPDrB,EHOIY,CGPT,GAAW,AHOE,CAACU,GGPC4C,AHON,CAAS9D,KAAT,EAAgBQ,IAAI,CAACQ,CGPnB,CAAmByC,GHOL,CAAWrD,CAAC,CGPD,CAAC4B,CHOG,CAAC1B,CAAC,GGP/B,AHOkCJ,CGPzD,AHOoD,IAAUQ,CAAV,GAAcJ,CAAlB,GAAsBM,EAAjC,CAAhB,CAAjB;AGNJ,AFEC,ADKGT,AELJ,AERU,ACNd,MLmBQA,GKnBH8G,CFYKpH,ADEAK,CAAC,CFKG,CAACN,CELDY,AGdd,EFYgB,AHOF,CKnBD,CLmBOX,AELF,CCFC,ADEAmB,EGdF6D,GFYOhF,AHOV,AELA,CAAW,CFKGO,AELFL,CFKZ,EAAiBe,CGPZ,ADEW,GCFG,ADEAd,GFKnB,CGPuB4D,CHOG3C,AELf,IAAiB,AGd7B,CHcC,CAAV,AGdJ,EFYiC,AHOnB,CGPiCwC,CHOGpD,GAApC,CAAN,CGP6C,CAAC2B,MAAP,GAAgB,CAA9B,CAA7B;AHQC,AEJD,AERJ,ACPA,SAAKyB,CHeKvB,CAAC,GAAGrC,CGfd,GAAc,EHeM,AGfpB,CHeqB,AGjBL,CAGhB,GHcyBK,CAAL,CAAhB;ACFA,AFEA,ACCA,AERJqE,EAAAA,ODKS,CFECrE,ACCAiC,CDDC,ACCA,CERD,CDKGf,CAAC,AFEAZ,ACCAX,AERF,GDKK,CAAb,AFEc,CAACmB,AGjBA,CDeCI,ADGA,CCHC,ADGA,GCHGqC,AFEV,CAAW,ACCAvD,CDDCH,ACCL,GAAQ,CCHC,AFEA,ACCV,CCHWiC,ADG3B,EDD6BhC,IEF7B,CFEqB,CEFcoB,CAAC,EAApC,AFEsC,CAA5B,CEF8B,AFExC;AEDIxB,AFGJsC,ADIA,AEHA,AERJ,ACPAmD,IJcInD,AIdJmD,CJcK,CEHGzF,EFGAC,ACCAgD,CCJG,CAACzB,AHOFD,CGPC,AHOA,AKlBJ,CFWC,AEXAV,EJcM,ADIAZ,AEHA,CCJGuB,AFGF,ACCAc,AGff,CFWQ,ADIM,AGfF,EHeMC,CDDCjC,ACCL,CDDA,ADIM,CCJhB,ADIiB,AEHAuC,EAAP,EFGWrC,AEHAsC,CFGJ,CEHP,CAAN,CFGqBrC,GAAT,AEHYuC,CFG5B,AKlBJ,CHeI,EAAgCX,MAAM,CAACK,IAAP,CAAY1C,GAAG,CAACM,CAAD,CAAf;ACH5BL,AFGJsC,ADIA,AEFA,AETJqC,ACPAgH,EDOAhH,EHOIrC,AIdJqJ,CJcK,CEHG3L,EFGAA,ADIAuB,AIXF,ACPF,CLkBK,AKlBJqK,CHgBKlJ,AETF,EDIM,AHOFxC,CGPG,CFGD,AGpBK,ACMnB,CJce,AIdJ,CLkBP,CGPeqB,CAAL,ADKI,CCLV,AFGWlB,AIdnB,CJce,CCEM,AGhBJwL,CFWOhI,ADKFtB,CDFC,CAAT,CAAV,CEHwB,ADKF,CCLGqB,CEX7B,CHgB6B,AGhBJ,CHgBJ,GCLc,CAACrC,ADKF,CCLC,ADK/B,CCLwB,CAApB,EEXkBuK,IAAD,EAAU;AFY3B9L,AFIJ,ADGA,AIZU,ACNZ,MFWMA,EFIAqC,ADGAb,CCHC,ADGA,CKlBDuK,EFWM,AHOF5L,CGPG,AFIF2B,EIfA,EFWMP,AFIX,ADGJ,CGPW,AEXCuK,GFWO,AFIFzJ,CEJP,AFIQ,AIfF,CFWZ,AEXauJ,GFWO9H,AFIF9B,EIfV,CAAW,CFWK,AFIxB,CEJyB4B,CEXjB,CAAd,CJegCtB,CAAC,EEJI,CAACf,CAAD,AFIAQ,CEJP,CAAxB,EFIA,IAAuCO,CAAC,IAAIL,IAAhD,EAAsDG,MAAM,CAACK,IAAP,CAAY1C,GAAG,CAACM,CAAD,CAAf;AEHrD,AFKD,ADGAoB,AEHA,AETJ,ACPE,ILmBEA,IEHIc,EDAEG,AIhBFL,CAAC,CLmBG,AEHA,CFGCtC,CKnBDiM,ELmBA,CEHK,CDAC,ADGAhM,AEHV,GDAa,ACAA4C,CDACL,CCAC,CFGX,AKnBU,CAACwJ,CJgBG,ADGA7L,AEHA4C,CAAL,EDAQ,CAAR,ADGT,AKnBgB,CHgBGT,AGhBF,CLmBG9B,AEHxB,AGhBoB,CLmBhB,AKnBU,CJgBY,ADG9B,AKnBF,CJgBE,ACA+BsC,EAAE,GAAGC,CAAL,IAAUR,CAAzC,EAA4C;AFI5C,AEHIJ,AETR0C,ACPE,EDOFA,GAAG,CFSK1C,CETH2C,CJYG7E,EKnBAsC,CHgBK,AGhBJ,CHgBKG,AETJ,EJYI,AKnBFuJ,CLmBG,CEHP,AETMnH,CFSK3E,EFGAC,EEHX,AEzBW,CAgBC,EJYL,AKnBO,CAAC4L,ELmBIvL,GAAb,AKnBc,CLmBpB,AKnBqB,CAAD,CAAN,CLmBYc,AKnBhC,CLmBE,EAAiCG,QAAQ,CAAC1B,GAAD,EAAMC,MAAN,EAAcE,IAAd,EAAoBC,KAApB,CAAR;AGPjC,AFKA,ACAI+B,MAAAA,EDAAK,GCAK,CDAD,ACAEE,IAAN,CDAS,ACAEpC,CDAX,ACAY,GDACyB,ACAE,CAAf,CCLC/B,EFKgB,CELrB,EAAUC,CFKeqC,CAArB,GAAyBN,CEL7B,EAAkB9B,CFKe,IAAIqC,CAArC,EELA,AFKwC,EELZ,CAA5B,EAA+BvC,GAAG,CAACoC,MAAJ,GAAa,CAA5C,EAA+C,CAA/C;AACH,AFKOD,ADGJ,AEHIA,AE3BW,ACUjB,CDVN,KH2BYA,ACAAA,IGjBF,CJiBO,ADGFX,AEHE,AGjBNwK,CJiBOtJ,ADGF,AEHEA,GFGCjB,CCHP,ADGJ,AEHI,AGjBI,CJiBOtB,ACAAwC,AGjBN,CLoBK,AKpBN,CAAN,EJiBE,EIjBWuJ,EHiBX,GGjBgB,CAAC5J,CAAD,CAAlB,IAAyB4J,KAAK,CAAC3J,CAAD,CAAlC,EAAuC;AJkBjCJ,ADGAT,AEHH,AGjBD,MJiBIS,ADGAT,KCHK,CAACgB,EDGE,CAAC1C,CCHT,CAAWM,CAAC,ADGJ,EAAML,CCHC,CAAf,IDGQ,EAAcuB,CAAd,EAAiBC,CAAjB,CAAR;AGPRK,AFKQK,ADGAX,AIbZ,ACPO,EFYHM,IFKQK,ADGAX,AIbNuD,CDKG,AHQI,CGRHhD,GFKO,CELR,AFKSW,AGVN,EDKIV,CCLDpB,CHUH,CAAW+B,CELd,CCLU,CDKGV,ACLF8C,IDKX,CFKG,CELgB7C,ACLb,IDKN,ACLqB,CAACL,CDKG,ECLA,IAAMS,CAAD,IAAO;ADMtC,AFKC,ADGGb,AEJJ,AEVwCI,EAAAA,GAAG,CJcvCJ,AIdwC,CJcvC,AIdsC,CFUvCe,AEVoC,GDMjC,ACN0C,CFUzC,AEV0CF,CAAV,IFU3B,CAAT,GAAaO,EAAE,GAAGE,CAAL,ICJJ,ADIcT,CAAvB,GAA2BQ,CCJb9C,CDIe,ECJ1B,CDI6B+C,CCJb,ADIQ,IAAUR,CCJbtC,ADI5B,EAA4C,ICJrC,EAA6B8B,IAA7B,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqD,KAAKhC,QAA1D,CAAP;AACH,ADIOiC,AEXiD,ACNvD,MHiBMA,AGjBN,GDM8DN,EFWnD,AGjBP,CHiBQa,AEXqD,ACN5DmB,CDM6D,CAAD,CAAV,CFWjD,CAAWvD,CAAC,AGjBlB,CAAYoC,EHiBS,CAAf,CGjBN,CAAiB;AJkBf,ADGI,AEHAP,AEZiE,ACLrE0D,CDKsB,EAAkD,GFYpE1D,CEZwE6C,CHYxExC,AIjBJqD,GHiBS,CDAD,ACAEnD,CFGCzC,GEHP,AGjBI,CJiBK,ACAEG,CDAX,AIjBM,CLoBO,AIfuD,CJetD,AIfuE,CHYxE6B,AGZuD,CFYpE,AEZkB,CAA9B,CJe8BT,CCHD,ADGH,GAAQf,CCHD6B,CAArB,CDGa,CAAN,CCHkBJ,EDGIX,CAA7B,CCH6B,CDGGC,CAAC,ECHAe,CAArC,EAAwC;AEH5CK,AFIQT,ACAAA,AGjBFwH,EFaN/G,IFIQT,ACAAA,ECJF,CAACG,CAAD,AEbAqH,CJiBO,ACAA,CCJHpH,AFIIG,ACAAA,CCJR,EAAOK,CAAP,AFIE,ACAA,CDAWzC,ACAAqC,CCJH,AFII,GAAG,AIjBN,CJiBT,CIjBW,CAACL,CHiBZ,AGjBW,EAAIC,CAAJ,CADL;AFeV,AFIIJ,ADEA,AEFH,AEZM,ACLLgK,MJiBEhK,AGZS8C,ICLXkH,CFaK,AFIE,CAACzJ,CDECzC,GCFP,AIjBI,CJiBOG,CGZR,ACLG4L,CLmBO,AIdS,CJcR,ECFd,CIjBW,CLmBOvK,AKnBN,CLmBE,AKnBH,GLmBWhB,GAAT,CGNH,AHMH,GAAsBc,CAA7B,CGNevB,CHMiByB,CAAC,CGN9B,EAAiB,KAAKxB,MAAtB,EAA8BqC,CAA9B,EAAiCC,CAAjC,EAAoCQ,CAApC,EAAuC,KAAK7C,QAA5C,CAAP;AACH,AFIOiC,ADEH,AEFJ,AEZDyB,ACRc,EDQdA,IHYQzB,KAAK,CAACO,CGZH,CAACwC,EHYJ,CAAWvC,IGZR,EAAU,EHYb;AACH,AGZD,ACVe,OAAjB,EDUOuC,OAAL,GAAeC,MAAM,CAACC,MAAM,CAACC,MAAP,CAAchB,cAAd,CAAD,EAAgCa,OAAhC,CAArB;ADlBoB,AF+BvB,ADEG,AEFJ,AEZI,ACLH,KAbD,GLgCQjF,CEFDoC,AEZEiD,KJcK,AIdV,CJcW,AEFf,EEZiB,EJcEnF,EIdEoF,EJcN,GAAW9E,AIdT,CAAU,EJcb,CAAN,EIdwByE,GJcG3D,CAA/B,EAAkCG,CIdX,CAAa6C,MJcM,CAACvE,AIdpB,GJcmB,AIdI,CAAjC,CJcmCC,AIdhD,MJc0C,EAAcE,IAAd,EAAoBsB,CAApB,CAAR,CAAlC,KACK;AACDA,AEHX,AEZI,ACJDgE,IAAAA,ELmBQhE,CAAC,IKnBF,CAACZ,GAAR,CAAY,kBAAZ;AJiBA,ADGQa,AKnBR,MLmBQA,GCHDW,AIhBFgF,KLmBW,AKnBhB,CJgBA,ADGiBrH,AKnBNwF,GLmBK,CKnBhB,CLmBsBvF,AKnBN,KAAK4D,CLmBL,EAAcpC,CAAd,EAAiBrB,AKnBjC,KLmBgB,CAAR;ACFX,ADGQ,AEHT,AEZIoF,ACHAC,EDGAD,ECHAC,EDGI,CAAC5B,EFYAZ,EGfE,CAACpC,CDGJ,EFYR,AEZiB,ACHb,CHeYqC,AGfA,EHehB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,CGfxB,CHeJ,EAAgC;AFKxB,AEJJ,AEZI,ACHL,QLmBS5B,AEJF6B,CFIG,CEJD,AEZE,GJgBG9C,AEJF0C,CFIP,CEJS,CFIG/C,EEJAiD,EFII,AEJpB,GFIuB3B,CAAC,GAAG,CAAX;AACZ,AEJJ,AEbWZ,MAAAA,EJiBHL,AEJF+C,CFIG,AIjBC,CFaF,GFIK9B,AEJF0B,CFIP,CEJS,CFIG/C,EEJAiD,EAAhB,CFIqB,GAAG5B,CAAC,GAAG,CAAZ;AACf,AEJD,AEdgB6C,MAAAA,GFcThB,EAAE,EEdC,CFcEA,EAAL,GAAUC,EAAE,GAAGA,EAAtB;AFKH,AEJA,AEf4BgB,MAAAA,OAAf;AAAwBrE,MAAAA,KCDpC,mBAAU2D,MAAV,EAA6B;ALsB/B,AIrBc,ACDiB,QDCmB,CJqBzCnC,CKtBW2E,GDCmCnB,CCDxB,GLsB/B,CAAkBlF,EIrBV,CJqBR,EAAuBC,MAAvB,EAA+BuB,CAA/B,EAAkCC,CAAlC,EAAqC,gDKtBV,EAAI;ALuB3BE,AIpBI,ACFJ,ELsBAA,IAAI,CAAC3B,CIpBGa,EJoBJ,AKtBEuL,CDEF,CJoBM5K,CAAN,AIpBSiE,EJoBAhE,CAAT,CAAJ,CKtBc,EDEM,CAACiE,ACFJ9E,IDEJ,ACFQ,CDEK,ACFJU,GAAL,CAASuC,MAAM,CAAC,CDEpB,ACFmB,CAAf,EAAoBA,MAAM,CAAC,CAAD,CAA1B,CAAjB;ALuBAlC,AInBI,ACHJ,ELsBAA,IAAI,CAAC1B,GInBK0F,ACHJ0G,GLsBF,EAAS,EInBI,CCHH,CLsBG7K,CAAb,AInBiB,CCHJZ,CLsBG,GKtBC,CLsBGa,AKtBFH,CLsBlB,CAAJ,CKtBiB,CAASuC,CDGOA,KCHD,CDGO,ACHN,CDGOzB,ACHR,CAAf,EAAoByB,GDGY,GCHN,CAAC,CAAD,CAA1B,CAAjB,EDGI;AJoBJlC,AInBI,ACHJ,ELsBAA,IAAI,CAAC1B,CInBGY,ECHFyL,CDGF,EJmBA,AInBS7G,EJmBA,EKtBA,ELsBIjE,CAAJ,AInBO,ACHJZ,CDGK8E,EJmBA,CAAjB,AKtBgB,CDGP,ACHQvE,CLsBG,AInBEwE,ECHV,CAAS9B,CLsBGpC,CAAJ,EInBX,CJmBmB,CAA5B,AKtB2B,CLsB/B,AKtBgC,CAAD,CAAf,EAAo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","file":"data-processor-worker.6b2453d3.js","sourceRoot":"../src/pages","sourcesContent":["\nexport default function sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) return;\n\n    const m = (left + right) >> 1;\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        const t = coords[2 * k + inc];\n        let i = left;\n        let j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) i++;\n            while (coords[2 * j + inc] > t) j--;\n        }\n\n        if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n","\nexport default function range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    const stack = [0, ids.length - 1, 0];\n    const result = [];\n    let x, y;\n\n    while (stack.length) {\n        const axis = stack.pop();\n        const right = stack.pop();\n        const left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (let i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        const m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n\n        const nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n","\nexport default function within(ids, coords, qx, qy, r, nodeSize) {\n    const stack = [0, ids.length - 1, 0];\n    const result = [];\n    const r2 = r * r;\n\n    while (stack.length) {\n        const axis = stack.pop();\n        const right = stack.pop();\n        const left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (let i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        const m = Math.floor((left + right) / 2);\n\n        const x = coords[2 * m];\n        const y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n\n        const nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n","\nimport sort from './sort';\nimport range from './range';\nimport within from './within';\n\nconst defaultGetX = p => p[0];\nconst defaultGetY = p => p[1];\n\nexport default class KDBush {\n    constructor(points, getX = defaultGetX, getY = defaultGetY, nodeSize = 64, ArrayType = Float64Array) {\n        this.nodeSize = nodeSize;\n        this.points = points;\n\n        const IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;\n\n        const ids = this.ids = new IndexArrayType(points.length);\n        const coords = this.coords = new ArrayType(points.length * 2);\n\n        for (let i = 0; i < points.length; i++) {\n            ids[i] = i;\n            coords[2 * i] = getX(points[i]);\n            coords[2 * i + 1] = getY(points[i]);\n        }\n\n        sort(ids, coords, nodeSize, 0, ids.length - 1, 0);\n    }\n\n    range(minX, minY, maxX, maxY) {\n        return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n    }\n\n    within(x, y, r) {\n        return within(this.ids, this.coords, x, y, r, this.nodeSize);\n    }\n}\n","\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            if (numPoints >= minPoints) { // enough points to form a cluster\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n","import Supercluster from \"supercluster\";\n\nclass DataProcessor {\n  constructor(data) {\n    this.index = new Supercluster();\n    this.points = [];\n    // specific to t-SNE\n\n    console.log(\"Reading data...\");\n    data.split(\"\\n\").forEach((line) => {\n      const parts = line.split(\",\");\n      const x = parseFloat(parts[1]);\n      const y = parseFloat(parts[2]);\n      if (!parts[0] || isNaN(x) || isNaN(y)) {\n        return;\n      }\n      this.points.push({\n        geometry: {\n          coordinates: [x, y],\n          sample: parts[0],\n        },\n      });\n    });\n\n    console.log(\"Indexing data...\");\n    this.index.load(this.points);\n\n    console.log(\"Data ready.\");\n  }\n\n  selectBox(points, zoom = 16) {\n    const smallerX = Math.min(points[0], points[2]);\n    const smallerY = Math.min(points[1], points[3]);\n    const largerX = Math.max(points[0], points[2]);\n    const largerY = Math.max(points[1], points[3]);\n\n    console.log(\n      this.index.getClusters([smallerX, smallerY, largerX, largerY], zoom)\n    );\n  }\n\n  selectLasso(data, zoom = 16) {}\n}\n\nexport default DataProcessor;\n","import DataProcessor from \"./data-processor\";\n\nself.onmessage = (message) => {\n  switch (message.data.type) {\n    case \"init\":\n      self.processor = new DataProcessor(message.data.data);\n      break;\n    case \"selectBox\":\n      self.processor.selectBox(message.data.points);\n      break;\n    case \"selectLasso\":\n      self.processor.selectLasso(message.data);\n    default:\n      console.error(`Received unknown message type: ${e}`);\n  }\n};\n"]}