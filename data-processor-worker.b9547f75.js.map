{"mappings":"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","sources":["./node_modules/flatqueue/index.mjs","./node_modules/flatbush/index.js","./node_modules/@turf/helpers/dist/es/index.js","./node_modules/@turf/invariant/dist/es/index.js","./node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","./node_modules/@turf/clean-coords/dist/es/index.js","./node_modules/@turf/clone/dist/es/index.js","./node_modules/@turf/meta/dist/es/index.js","./node_modules/@turf/simplify/dist/es/index.js","./src/epiviz.gl/geometry-mapper.js","./src/epiviz.gl/data-processor.js","./src/epiviz.gl/data-processor-worker.js"],"sourcesContent":["\nexport default class FlatQueue {\n\n    constructor() {\n        this.ids = [];\n        this.values = [];\n        this.length = 0;\n    }\n\n    clear() {\n        this.length = 0;\n    }\n\n    push(id, value) {\n        let pos = this.length++;\n        this.ids[pos] = id;\n        this.values[pos] = value;\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const parentValue = this.values[parent];\n            if (value >= parentValue) break;\n            this.ids[pos] = this.ids[parent];\n            this.values[pos] = parentValue;\n            pos = parent;\n        }\n\n        this.ids[pos] = id;\n        this.values[pos] = value;\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.ids[0];\n        this.length--;\n\n        if (this.length > 0) {\n            const id = this.ids[0] = this.ids[this.length];\n            const value = this.values[0] = this.values[this.length];\n            const halfLength = this.length >> 1;\n            let pos = 0;\n\n            while (pos < halfLength) {\n                let left = (pos << 1) + 1;\n                const right = left + 1;\n                let bestIndex = this.ids[left];\n                let bestValue = this.values[left];\n                const rightValue = this.values[right];\n\n                if (right < this.length && rightValue < bestValue) {\n                    left = right;\n                    bestIndex = this.ids[right];\n                    bestValue = rightValue;\n                }\n                if (bestValue >= value) break;\n\n                this.ids[pos] = bestIndex;\n                this.values[pos] = bestValue;\n                pos = left;\n            }\n\n            this.ids[pos] = id;\n            this.values[pos] = value;\n        }\n\n        return top;\n    }\n\n    peek() {\n        if (this.length === 0) return undefined;\n        return this.ids[0];\n    }\n\n    peekValue() {\n        if (this.length === 0) return undefined;\n        return this.values[0];\n    }\n}\n","\nimport FlatQueue from 'flatqueue';\n\nconst ARRAY_TYPES = [\n    Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,\n    Int32Array, Uint32Array, Float32Array, Float64Array\n];\n\nconst VERSION = 3; // serialized format version\n\nexport default class Flatbush {\n\n    static from(data) {\n        if (!(data instanceof ArrayBuffer)) {\n            throw new Error('Data must be an instance of ArrayBuffer.');\n        }\n        const [magic, versionAndType] = new Uint8Array(data, 0, 2);\n        if (magic !== 0xfb) {\n            throw new Error('Data does not appear to be in a Flatbush format.');\n        }\n        if (versionAndType >> 4 !== VERSION) {\n            throw new Error(`Got v${versionAndType >> 4} data when expected v${VERSION}.`);\n        }\n        const [nodeSize] = new Uint16Array(data, 2, 1);\n        const [numItems] = new Uint32Array(data, 4, 1);\n\n        return new Flatbush(numItems, nodeSize, ARRAY_TYPES[versionAndType & 0x0f], data);\n    }\n\n    constructor(numItems, nodeSize = 16, ArrayType = Float64Array, data) {\n        if (numItems === undefined) throw new Error('Missing required argument: numItems.');\n        if (isNaN(numItems) || numItems <= 0) throw new Error(`Unpexpected numItems value: ${numItems}.`);\n\n        this.numItems = +numItems;\n        this.nodeSize = Math.min(Math.max(+nodeSize, 2), 65535);\n\n        // calculate the total number of nodes in the R-tree to allocate space for\n        // and the index of each tree level (used in search later)\n        let n = numItems;\n        let numNodes = n;\n        this._levelBounds = [n * 4];\n        do {\n            n = Math.ceil(n / this.nodeSize);\n            numNodes += n;\n            this._levelBounds.push(numNodes * 4);\n        } while (n !== 1);\n\n        this.ArrayType = ArrayType || Float64Array;\n        this.IndexArrayType = numNodes < 16384 ? Uint16Array : Uint32Array;\n\n        const arrayTypeIndex = ARRAY_TYPES.indexOf(this.ArrayType);\n        const nodesByteSize = numNodes * 4 * this.ArrayType.BYTES_PER_ELEMENT;\n\n        if (arrayTypeIndex < 0) {\n            throw new Error(`Unexpected typed array class: ${ArrayType}.`);\n        }\n\n        if (data && (data instanceof ArrayBuffer)) {\n            this.data = data;\n            this._boxes = new this.ArrayType(this.data, 8, numNodes * 4);\n            this._indices = new this.IndexArrayType(this.data, 8 + nodesByteSize, numNodes);\n\n            this._pos = numNodes * 4;\n            this.minX = this._boxes[this._pos - 4];\n            this.minY = this._boxes[this._pos - 3];\n            this.maxX = this._boxes[this._pos - 2];\n            this.maxY = this._boxes[this._pos - 1];\n\n        } else {\n            this.data = new ArrayBuffer(8 + nodesByteSize + numNodes * this.IndexArrayType.BYTES_PER_ELEMENT);\n            this._boxes = new this.ArrayType(this.data, 8, numNodes * 4);\n            this._indices = new this.IndexArrayType(this.data, 8 + nodesByteSize, numNodes);\n            this._pos = 0;\n            this.minX = Infinity;\n            this.minY = Infinity;\n            this.maxX = -Infinity;\n            this.maxY = -Infinity;\n\n            new Uint8Array(this.data, 0, 2).set([0xfb, (VERSION << 4) + arrayTypeIndex]);\n            new Uint16Array(this.data, 2, 1)[0] = nodeSize;\n            new Uint32Array(this.data, 4, 1)[0] = numItems;\n        }\n\n        // a priority queue for k-nearest-neighbors queries\n        this._queue = new FlatQueue();\n    }\n\n    add(minX, minY, maxX, maxY) {\n        const index = this._pos >> 2;\n        this._indices[index] = index;\n        this._boxes[this._pos++] = minX;\n        this._boxes[this._pos++] = minY;\n        this._boxes[this._pos++] = maxX;\n        this._boxes[this._pos++] = maxY;\n\n        if (minX < this.minX) this.minX = minX;\n        if (minY < this.minY) this.minY = minY;\n        if (maxX > this.maxX) this.maxX = maxX;\n        if (maxY > this.maxY) this.maxY = maxY;\n\n        return index;\n    }\n\n    finish() {\n        if (this._pos >> 2 !== this.numItems) {\n            throw new Error(`Added ${this._pos >> 2} items when expected ${this.numItems}.`);\n        }\n\n        if (this.numItems <= this.nodeSize) {\n            // only one node, skip sorting and just fill the root box\n            this._boxes[this._pos++] = this.minX;\n            this._boxes[this._pos++] = this.minY;\n            this._boxes[this._pos++] = this.maxX;\n            this._boxes[this._pos++] = this.maxY;\n            return;\n        }\n\n        const width = this.maxX - this.minX;\n        const height = this.maxY - this.minY;\n        const hilbertValues = new Uint32Array(this.numItems);\n        const hilbertMax = (1 << 16) - 1;\n\n        // map item centers into Hilbert coordinate space and calculate Hilbert values\n        for (let i = 0; i < this.numItems; i++) {\n            let pos = 4 * i;\n            const minX = this._boxes[pos++];\n            const minY = this._boxes[pos++];\n            const maxX = this._boxes[pos++];\n            const maxY = this._boxes[pos++];\n            const x = Math.floor(hilbertMax * ((minX + maxX) / 2 - this.minX) / width);\n            const y = Math.floor(hilbertMax * ((minY + maxY) / 2 - this.minY) / height);\n            hilbertValues[i] = hilbert(x, y);\n        }\n\n        // sort items by their Hilbert value (for packing later)\n        sort(hilbertValues, this._boxes, this._indices, 0, this.numItems - 1, this.nodeSize);\n\n        // generate nodes at each tree level, bottom-up\n        for (let i = 0, pos = 0; i < this._levelBounds.length - 1; i++) {\n            const end = this._levelBounds[i];\n\n            // generate a parent node for each block of consecutive <nodeSize> nodes\n            while (pos < end) {\n                const nodeIndex = pos;\n\n                // calculate bbox for the new node\n                let nodeMinX = Infinity;\n                let nodeMinY = Infinity;\n                let nodeMaxX = -Infinity;\n                let nodeMaxY = -Infinity;\n                for (let i = 0; i < this.nodeSize && pos < end; i++) {\n                    nodeMinX = Math.min(nodeMinX, this._boxes[pos++]);\n                    nodeMinY = Math.min(nodeMinY, this._boxes[pos++]);\n                    nodeMaxX = Math.max(nodeMaxX, this._boxes[pos++]);\n                    nodeMaxY = Math.max(nodeMaxY, this._boxes[pos++]);\n                }\n\n                // add the new node to the tree data\n                this._indices[this._pos >> 2] = nodeIndex;\n                this._boxes[this._pos++] = nodeMinX;\n                this._boxes[this._pos++] = nodeMinY;\n                this._boxes[this._pos++] = nodeMaxX;\n                this._boxes[this._pos++] = nodeMaxY;\n            }\n        }\n    }\n\n    search(minX, minY, maxX, maxY, filterFn) {\n        if (this._pos !== this._boxes.length) {\n            throw new Error('Data not yet indexed - call index.finish().');\n        }\n\n        let nodeIndex = this._boxes.length - 4;\n        const queue = [];\n        const results = [];\n\n        while (nodeIndex !== undefined) {\n            // find the end index of the node\n            const end = Math.min(nodeIndex + this.nodeSize * 4, upperBound(nodeIndex, this._levelBounds));\n\n            // search through child nodes\n            for (let pos = nodeIndex; pos < end; pos += 4) {\n                const index = this._indices[pos >> 2] | 0;\n\n                // check if node bbox intersects with query bbox\n                if (maxX < this._boxes[pos]) continue; // maxX < nodeMinX\n                if (maxY < this._boxes[pos + 1]) continue; // maxY < nodeMinY\n                if (minX > this._boxes[pos + 2]) continue; // minX > nodeMaxX\n                if (minY > this._boxes[pos + 3]) continue; // minY > nodeMaxY\n\n                if (nodeIndex < this.numItems * 4) {\n                    if (filterFn === undefined || filterFn(index)) {\n                        results.push(index); // leaf item\n                    }\n\n                } else {\n                    queue.push(index); // node; add it to the search queue\n                }\n            }\n\n            nodeIndex = queue.pop();\n        }\n\n        return results;\n    }\n\n    neighbors(x, y, maxResults = Infinity, maxDistance = Infinity, filterFn) {\n        if (this._pos !== this._boxes.length) {\n            throw new Error('Data not yet indexed - call index.finish().');\n        }\n\n        let nodeIndex = this._boxes.length - 4;\n        const q = this._queue;\n        const results = [];\n        const maxDistSquared = maxDistance * maxDistance;\n\n        while (nodeIndex !== undefined) {\n            // find the end index of the node\n            const end = Math.min(nodeIndex + this.nodeSize * 4, upperBound(nodeIndex, this._levelBounds));\n\n            // add child nodes to the queue\n            for (let pos = nodeIndex; pos < end; pos += 4) {\n                const index = this._indices[pos >> 2] | 0;\n\n                const dx = axisDist(x, this._boxes[pos], this._boxes[pos + 2]);\n                const dy = axisDist(y, this._boxes[pos + 1], this._boxes[pos + 3]);\n                const dist = dx * dx + dy * dy;\n\n                if (nodeIndex < this.numItems * 4) { // leaf node\n                    if (filterFn === undefined || filterFn(index)) {\n                        // put a negative index if it's an item rather than a node, to recognize later\n                        q.push(-index - 1, dist);\n                    }\n                } else {\n                    q.push(index, dist);\n                }\n            }\n\n            // pop items from the queue\n            while (q.length && q.peek() < 0) {\n                const dist = q.peekValue();\n                if (dist > maxDistSquared) {\n                    q.clear();\n                    return results;\n                }\n                results.push(-q.pop() - 1);\n\n                if (results.length === maxResults) {\n                    q.clear();\n                    return results;\n                }\n            }\n\n            nodeIndex = q.pop();\n        }\n\n        q.clear();\n        return results;\n    }\n}\n\nfunction axisDist(k, min, max) {\n    return k < min ? min - k : k <= max ? 0 : k - max;\n}\n\n// binary search for the first value in the array bigger than the given\nfunction upperBound(value, arr) {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        const m = (i + j) >> 1;\n        if (arr[m] > value) {\n            j = m;\n        } else {\n            i = m + 1;\n        }\n    }\n    return arr[i];\n}\n\n// custom quicksort that partially sorts bbox data alongside the hilbert values\nfunction sort(values, boxes, indices, left, right, nodeSize) {\n    if (Math.floor(left / nodeSize) >= Math.floor(right / nodeSize)) return;\n\n    const pivot = values[(left + right) >> 1];\n    let i = left - 1;\n    let j = right + 1;\n\n    while (true) {\n        do i++; while (values[i] < pivot);\n        do j--; while (values[j] > pivot);\n        if (i >= j) break;\n        swap(values, boxes, indices, i, j);\n    }\n\n    sort(values, boxes, indices, left, j, nodeSize);\n    sort(values, boxes, indices, j + 1, right, nodeSize);\n}\n\n// swap two values and two corresponding boxes\nfunction swap(values, boxes, indices, i, j) {\n    const temp = values[i];\n    values[i] = values[j];\n    values[j] = temp;\n\n    const k = 4 * i;\n    const m = 4 * j;\n\n    const a = boxes[k];\n    const b = boxes[k + 1];\n    const c = boxes[k + 2];\n    const d = boxes[k + 3];\n    boxes[k] = boxes[m];\n    boxes[k + 1] = boxes[m + 1];\n    boxes[k + 2] = boxes[m + 2];\n    boxes[k + 3] = boxes[m + 3];\n    boxes[m] = a;\n    boxes[m + 1] = b;\n    boxes[m + 2] = c;\n    boxes[m + 3] = d;\n\n    const e = indices[i];\n    indices[i] = indices[j];\n    indices[j] = e;\n}\n\n// Fast Hilbert curve algorithm by http://threadlocalmutex.com/\n// Ported from C++ https://github.com/rawrunprotected/hilbert_curves (public domain)\nfunction hilbert(x, y) {\n    let a = x ^ y;\n    let b = 0xFFFF ^ a;\n    let c = 0xFFFF ^ (x | y);\n    let d = x & (y ^ 0xFFFF);\n\n    let A = a | (b >> 1);\n    let B = (a >> 1) ^ a;\n    let C = ((c >> 1) ^ (b & (d >> 1))) ^ c;\n    let D = ((a & (c >> 1)) ^ (d >> 1)) ^ d;\n\n    a = A; b = B; c = C; d = D;\n    A = ((a & (a >> 2)) ^ (b & (b >> 2)));\n    B = ((a & (b >> 2)) ^ (b & ((a ^ b) >> 2)));\n    C ^= ((a & (c >> 2)) ^ (b & (d >> 2)));\n    D ^= ((b & (c >> 2)) ^ ((a ^ b) & (d >> 2)));\n\n    a = A; b = B; c = C; d = D;\n    A = ((a & (a >> 4)) ^ (b & (b >> 4)));\n    B = ((a & (b >> 4)) ^ (b & ((a ^ b) >> 4)));\n    C ^= ((a & (c >> 4)) ^ (b & (d >> 4)));\n    D ^= ((b & (c >> 4)) ^ ((a ^ b) & (d >> 4)));\n\n    a = A; b = B; c = C; d = D;\n    C ^= ((a & (c >> 8)) ^ (b & (d >> 8)));\n    D ^= ((b & (c >> 8)) ^ ((a ^ b) & (d >> 8)));\n\n    a = C ^ (C >> 1);\n    b = D ^ (D >> 1);\n\n    let i0 = x ^ y;\n    let i1 = b | (0xFFFF ^ (i0 | a));\n\n    i0 = (i0 | (i0 << 8)) & 0x00FF00FF;\n    i0 = (i0 | (i0 << 4)) & 0x0F0F0F0F;\n    i0 = (i0 | (i0 << 2)) & 0x33333333;\n    i0 = (i0 | (i0 << 1)) & 0x55555555;\n\n    i1 = (i1 | (i1 << 8)) & 0x00FF00FF;\n    i1 = (i1 | (i1 << 4)) & 0x0F0F0F0F;\n    i1 = (i1 | (i1 << 2)) & 0x33333333;\n    i1 = (i1 | (i1 << 1)) & 0x55555555;\n\n    return ((i1 << 1) | i0) >>> 0;\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import { feature } from \"@turf/helpers\";\nimport { getCoords, getType } from \"@turf/invariant\";\n// To-Do => Improve Typescript GeoJSON handling\n/**\n * Removes redundant coordinates from any GeoJSON Geometry.\n *\n * @name cleanCoords\n * @param {Geometry|Feature} geojson Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated\n * @returns {Geometry|Feature} the cleaned input Feature/Geometry\n * @example\n * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\n * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n *\n * turf.cleanCoords(line).geometry.coordinates;\n * //= [[0, 0], [0, 10]]\n *\n * turf.cleanCoords(multiPoint).geometry.coordinates;\n * //= [[0, 0], [2, 2]]\n */\nfunction cleanCoords(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Backwards compatible with v4.0\n    var mutate = typeof options === \"object\" ? options.mutate : options;\n    if (!geojson)\n        throw new Error(\"geojson is required\");\n    var type = getType(geojson);\n    // Store new \"clean\" points in this Array\n    var newCoords = [];\n    switch (type) {\n        case \"LineString\":\n            newCoords = cleanLine(geojson);\n            break;\n        case \"MultiLineString\":\n        case \"Polygon\":\n            getCoords(geojson).forEach(function (line) {\n                newCoords.push(cleanLine(line));\n            });\n            break;\n        case \"MultiPolygon\":\n            getCoords(geojson).forEach(function (polygons) {\n                var polyPoints = [];\n                polygons.forEach(function (ring) {\n                    polyPoints.push(cleanLine(ring));\n                });\n                newCoords.push(polyPoints);\n            });\n            break;\n        case \"Point\":\n            return geojson;\n        case \"MultiPoint\":\n            var existing = {};\n            getCoords(geojson).forEach(function (coord) {\n                var key = coord.join(\"-\");\n                if (!existing.hasOwnProperty(key)) {\n                    newCoords.push(coord);\n                    existing[key] = true;\n                }\n            });\n            break;\n        default:\n            throw new Error(type + \" geometry not supported\");\n    }\n    // Support input mutation\n    if (geojson.coordinates) {\n        if (mutate === true) {\n            geojson.coordinates = newCoords;\n            return geojson;\n        }\n        return { type: type, coordinates: newCoords };\n    }\n    else {\n        if (mutate === true) {\n            geojson.geometry.coordinates = newCoords;\n            return geojson;\n        }\n        return feature({ type: type, coordinates: newCoords }, geojson.properties, {\n            bbox: geojson.bbox,\n            id: geojson.id,\n        });\n    }\n}\n/**\n * Clean Coords\n *\n * @private\n * @param {Array<number>|LineString} line Line\n * @returns {Array<number>} Cleaned coordinates\n */\nfunction cleanLine(line) {\n    var points = getCoords(line);\n    // handle \"clean\" segment\n    if (points.length === 2 && !equals(points[0], points[1]))\n        return points;\n    var newPoints = [];\n    var secondToLast = points.length - 1;\n    var newPointsLength = newPoints.length;\n    newPoints.push(points[0]);\n    for (var i = 1; i < secondToLast; i++) {\n        var prevAddedPoint = newPoints[newPoints.length - 1];\n        if (points[i][0] === prevAddedPoint[0] &&\n            points[i][1] === prevAddedPoint[1])\n            continue;\n        else {\n            newPoints.push(points[i]);\n            newPointsLength = newPoints.length;\n            if (newPointsLength > 2) {\n                if (isPointOnLineSegment(newPoints[newPointsLength - 3], newPoints[newPointsLength - 1], newPoints[newPointsLength - 2]))\n                    newPoints.splice(newPoints.length - 2, 1);\n            }\n        }\n    }\n    newPoints.push(points[points.length - 1]);\n    newPointsLength = newPoints.length;\n    if (equals(points[0], points[points.length - 1]) && newPointsLength < 4)\n        throw new Error(\"invalid polygon\");\n    if (isPointOnLineSegment(newPoints[newPointsLength - 3], newPoints[newPointsLength - 1], newPoints[newPointsLength - 2]))\n        newPoints.splice(newPoints.length - 2, 1);\n    return newPoints;\n}\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Position} pt1 point\n * @param {Position} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction equals(pt1, pt2) {\n    return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n/**\n * Returns if `point` is on the segment between `start` and `end`.\n * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)\n *\n * @private\n * @param {Position} start coord pair of start of line\n * @param {Position} end coord pair of end of line\n * @param {Position} point coord pair of point to check\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(start, end, point) {\n    var x = point[0], y = point[1];\n    var startX = start[0], startY = start[1];\n    var endX = end[0], endY = end[1];\n    var dxc = x - startX;\n    var dyc = y - startY;\n    var dxl = endX - startX;\n    var dyl = endY - startY;\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0)\n        return false;\n    else if (Math.abs(dxl) >= Math.abs(dyl))\n        return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;\n    else\n        return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;\n}\nexport default cleanCoords;\n","/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    switch (geojson.type) {\n        case \"Feature\":\n            return cloneFeature(geojson);\n        case \"FeatureCollection\":\n            return cloneFeatureCollection(geojson);\n        case \"Point\":\n        case \"LineString\":\n        case \"Polygon\":\n        case \"MultiPoint\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n        case \"GeometryCollection\":\n            return cloneGeometry(geojson);\n        default:\n            throw new Error(\"unknown GeoJSON type\");\n    }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\nfunction cloneFeature(geojson) {\n    var cloned = { type: \"Feature\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"properties\":\n            case \"geometry\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add properties & geometry last\n    cloned.properties = cloneProperties(geojson.properties);\n    cloned.geometry = cloneGeometry(geojson.geometry);\n    return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\nfunction cloneProperties(properties) {\n    var cloned = {};\n    if (!properties) {\n        return cloned;\n    }\n    Object.keys(properties).forEach(function (key) {\n        var value = properties[key];\n        if (typeof value === \"object\") {\n            if (value === null) {\n                // handle null\n                cloned[key] = null;\n            }\n            else if (Array.isArray(value)) {\n                // handle Array\n                cloned[key] = value.map(function (item) {\n                    return item;\n                });\n            }\n            else {\n                // handle generic Object\n                cloned[key] = cloneProperties(value);\n            }\n        }\n        else {\n            cloned[key] = value;\n        }\n    });\n    return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\nfunction cloneFeatureCollection(geojson) {\n    var cloned = { type: \"FeatureCollection\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"features\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add features\n    cloned.features = geojson.features.map(function (feature) {\n        return cloneFeature(feature);\n    });\n    return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\nfunction cloneGeometry(geometry) {\n    var geom = { type: geometry.type };\n    if (geometry.bbox) {\n        geom.bbox = geometry.bbox;\n    }\n    if (geometry.type === \"GeometryCollection\") {\n        geom.geometries = geometry.geometries.map(function (g) {\n            return cloneGeometry(g);\n        });\n        return geom;\n    }\n    geom.coordinates = deepSlice(geometry.coordinates);\n    return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\nfunction deepSlice(coords) {\n    var cloned = coords;\n    if (typeof cloned[0] !== \"object\") {\n        return cloned.slice();\n    }\n    return cloned.map(function (coord) {\n        return deepSlice(coord);\n    });\n}\nexport default clone;\n","import { feature, point, lineString, isObject } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature$$1.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature$$1.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature$$1,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature$$1.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n    if (feature$$1.geometry === null) return;\n    var type = feature$$1.geometry.type;\n    var coords = feature$$1.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature$$1, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature$$1.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordEach, coordReduce, propEach, propReduce, featureEach, featureReduce, coordAll, geomEach, geomReduce, flattenEach, flattenReduce, segmentEach, segmentReduce, lineEach, lineReduce, findSegment, findPoint };\n","import cleanCoords from '@turf/clean-coords';\nimport clone from '@turf/clone';\nimport { geomEach } from '@turf/meta';\nimport { isObject } from '@turf/helpers';\n\n/*\n (c) 2013, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n  var dx = p1.x - p2.x,\n    dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n  var x = p1.x,\n    y = p1.y,\n    dx = p2.x - x,\n    dy = p2.y - y;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2.x;\n      y = p2.y;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p.x - x;\n  dy = p.y - y;\n\n  return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n  var prevPoint = points[0],\n    newPoints = [prevPoint],\n    point;\n\n  for (var i = 1, len = points.length; i < len; i++) {\n    point = points[i];\n\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n\n  if (prevPoint !== point) newPoints.push(point);\n\n  return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n  var maxSqDist = sqTolerance,\n    index;\n\n  for (var i = first + 1; i < last; i++) {\n    var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1)\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    simplified.push(points[index]);\n    if (last - index > 1)\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n  var last = points.length - 1;\n\n  var simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n  if (points.length <= 2) return points;\n\n  var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n\n  return points;\n}\n\n/**\n * Takes a {@link GeoJSON} object and returns a simplified version. Internally uses\n * [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.\n *\n * @name simplify\n * @param {GeoJSON} geojson object to be simplified\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.tolerance=1] simplification tolerance\n * @param {boolean} [options.highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} a simplified GeoJSON\n * @example\n * var geojson = turf.polygon([[\n *   [-70.603637, -33.399918],\n *   [-70.614624, -33.395332],\n *   [-70.639343, -33.392466],\n *   [-70.659942, -33.394759],\n *   [-70.683975, -33.404504],\n *   [-70.697021, -33.419406],\n *   [-70.701141, -33.434306],\n *   [-70.700454, -33.446339],\n *   [-70.694274, -33.458369],\n *   [-70.682601, -33.465816],\n *   [-70.668869, -33.472117],\n *   [-70.646209, -33.473835],\n *   [-70.624923, -33.472117],\n *   [-70.609817, -33.468107],\n *   [-70.595397, -33.458369],\n *   [-70.587158, -33.442901],\n *   [-70.587158, -33.426283],\n *   [-70.590591, -33.414248],\n *   [-70.594711, -33.406224],\n *   [-70.603637, -33.399918]\n * ]]);\n * var options = {tolerance: 0.01, highQuality: false};\n * var simplified = turf.simplify(geojson, options);\n *\n * //addToMap\n * var addToMap = [geojson, simplified]\n */\nfunction simplify$1(geojson, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var tolerance = options.tolerance !== undefined ? options.tolerance : 1;\n  var highQuality = options.highQuality || false;\n  var mutate = options.mutate || false;\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (tolerance && tolerance < 0) throw new Error(\"invalid tolerance\");\n\n  // Clone geojson to avoid side effects\n  if (mutate !== true) geojson = clone(geojson);\n\n  geomEach(geojson, function (geom) {\n    simplifyGeom(geom, tolerance, highQuality);\n  });\n  return geojson;\n}\n\n/**\n * Simplifies a feature's coordinates\n *\n * @private\n * @param {Geometry} geometry to be simplified\n * @param {number} [tolerance=1] simplification tolerance\n * @param {boolean} [highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\n * @returns {Geometry} output\n */\nfunction simplifyGeom(geometry, tolerance, highQuality) {\n  var type = geometry.type;\n\n  // \"unsimplyfiable\" geometry types\n  if (type === \"Point\" || type === \"MultiPoint\") return geometry;\n\n  // Remove any extra coordinates\n  cleanCoords(geometry, true);\n\n  var coordinates = geometry.coordinates;\n  switch (type) {\n    case \"LineString\":\n      geometry[\"coordinates\"] = simplifyLine(\n        coordinates,\n        tolerance,\n        highQuality\n      );\n      break;\n    case \"MultiLineString\":\n      geometry[\"coordinates\"] = coordinates.map(function (lines) {\n        return simplifyLine(lines, tolerance, highQuality);\n      });\n      break;\n    case \"Polygon\":\n      geometry[\"coordinates\"] = simplifyPolygon(\n        coordinates,\n        tolerance,\n        highQuality\n      );\n      break;\n    case \"MultiPolygon\":\n      geometry[\"coordinates\"] = coordinates.map(function (rings) {\n        return simplifyPolygon(rings, tolerance, highQuality);\n      });\n  }\n  return geometry;\n}\n\n/**\n * Simplifies the coordinates of a LineString with simplify-js\n *\n * @private\n * @param {Array<number>} coordinates to be processed\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\n * @returns {Array<Array<number>>} simplified coords\n */\nfunction simplifyLine(coordinates, tolerance, highQuality) {\n  return simplify(\n    coordinates.map(function (coord) {\n      return { x: coord[0], y: coord[1], z: coord[2] };\n    }),\n    tolerance,\n    highQuality\n  ).map(function (coords) {\n    return coords.z ? [coords.x, coords.y, coords.z] : [coords.x, coords.y];\n  });\n}\n\n/**\n * Simplifies the coordinates of a Polygon with simplify-js\n *\n * @private\n * @param {Array<number>} coordinates to be processed\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\n * @returns {Array<Array<Array<number>>>} simplified coords\n */\nfunction simplifyPolygon(coordinates, tolerance, highQuality) {\n  return coordinates.map(function (ring) {\n    var pts = ring.map(function (coord) {\n      return { x: coord[0], y: coord[1] };\n    });\n    if (pts.length < 4) {\n      throw new Error(\"invalid polygon\");\n    }\n    var simpleRing = simplify(pts, tolerance, highQuality).map(function (\n      coords\n    ) {\n      return [coords.x, coords.y];\n    });\n    //remove 1 percent of tolerance until enough points to make a triangle\n    while (!checkValidity(simpleRing)) {\n      tolerance -= tolerance * 0.01;\n      simpleRing = simplify(pts, tolerance, highQuality).map(function (\n        coords\n      ) {\n        return [coords.x, coords.y];\n      });\n    }\n    if (\n      simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] ||\n      simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]\n    ) {\n      simpleRing.push(simpleRing[0]);\n    }\n    return simpleRing;\n  });\n}\n\n/**\n * Returns true if ring has at least 3 coordinates and its first coordinate is the same as its last\n *\n * @private\n * @param {Array<number>} ring coordinates to be checked\n * @returns {boolean} true if valid\n */\nfunction checkValidity(ring) {\n  if (ring.length < 3) return false;\n  //if the last point is the same as the first, it's not a triangle\n  return !(\n    ring.length === 3 &&\n    ring[2][0] === ring[0][0] &&\n    ring[2][1] === ring[0][1]\n  );\n}\n\nexport default simplify$1;\n","import {\n  SIZE_UNITS,\n  transformGenomicRangeToStandard,\n  transformGenomicRangeArcToStandard,\n} from \"./vertex-calculator\";\nimport { getViewportForSchema } from \"./utilities\";\n\nclass GeometryMapper {\n  /**\n   * A class meant to modify data points from the getNextDataPoint method of the {@link Track} object\n   * to geometries that coincide with their visibility on the canvas i.e. with a proper width, height,\n   * x and y. This class is NOT meant to be used by the WebGLDrawer for rendering. It is solely used\n   * by the DataProcessor to properly index the data.\n   *\n   * @param {SchemaProcessor} schemaObject of the visualization for these geometries\n   * @param {Track} trackObject containing track info for track that these geometries are a part of\n   */\n  constructor(schemaObject, trackObject) {\n    this.schemaObject = schemaObject;\n    this.trackObject = trackObject;\n    this.track = trackObject.track;\n    this.xScale = this.schemaObject.xScale;\n    this.yScale = this.schemaObject.yScale;\n\n    const viewportForSchema = getViewportForSchema(schemaObject.schema);\n    if (schemaObject.xScale.isGenomeScale) {\n      this.xDomainWidth = 2 / 2;\n    } else {\n      this.xDomainWidth = (viewportForSchema[1] - viewportForSchema[0]) / 2;\n    }\n\n    if (schemaObject.yScale.isGenomeScale) {\n      this.yDomainHeight = 2 / 2;\n    } else {\n      this.yDomainHeight = (viewportForSchema[3] - viewportForSchema[2]) / 2;\n    }\n  }\n\n  /**\n   * Modifies a geometry object in place based on the schema.\n   *\n   * @param {Object} geometry an object of the form {dimensions: Array(2), coordinates: Array(2)}\n   */\n  modifyGeometry(geometry) {\n    if (this.xScale.isGenomeScale) {\n      // transforms x part into a standard format\n      if (this.trackObject.track.x.type === \"genomicRange\") {\n        this._modifyGenomicRangeX(geometry);\n      }\n      geometry.coordinates[0] = this.xScale(geometry.coordinates[0]);\n    }\n    this._modifyStandardX(geometry);\n\n    if (this.yScale.isGenomeScale) {\n      // transforms y part into a standard format\n      if (this.trackObject.track.y.type === \"genomicRange\") {\n        this._modifyGenomicRangeY(geometry);\n      }\n      geometry.coordinates[1] = this.yScale(geometry.coordinates[1]);\n    }\n    this._modifyStandardY(geometry);\n  }\n\n  _modifyStandardX(geometry) {\n    if (geometry.dimensions[0]) {\n      // Transform width from the data point into visible width on the canvas\n      geometry.dimensions[0] *= this.xDomainWidth * SIZE_UNITS;\n    }\n\n    // If there is no width, give very small width for flatbush indexing\n    geometry.dimensions[0] = geometry.dimensions[0] || 1e-10;\n  }\n\n  _modifyStandardY(geometry) {\n    if (geometry.dimensions[1]) {\n      // Transform height from the data point into visible height on the canvas\n      geometry.dimensions[1] *= this.yDomainHeight * SIZE_UNITS;\n    }\n\n    // If there is no height, give very small height for flatbush indexing\n    geometry.dimensions[1] = geometry.dimensions[1] || 1e-10;\n  }\n\n  _modifyGenomicRangeX(geometry) {\n    if (this.trackObject.track.mark === \"arc\") {\n      /**\n       * Geometry is in the form\n       * {\n       *   coordinates: [[[chr1,gene1], [chr2,gene2]], <y-coord handled in _modifyGenomicRangeY>]\n       *   dimensions: [[[chr3,gene3], [chr3,gene3]], <height handled in _modifyGenomicRangeY>]\n       * }\n       *\n       * and is transformed to\n       * {\n       *   coordinates: [x-coord between -1 and 1, <y handled elsewhere>]\n       *   dimensions: [width, <height handled elsewhere>]\n       * }\n       */\n      const standardized = transformGenomicRangeArcToStandard(\n        {\n          x: geometry.coordinates[0],\n          y: 0,\n          width: geometry.dimensions[0],\n          height: 0,\n        },\n        this.schemaObject.xScale,\n        this.schemaObject.yScale\n      );\n\n      geometry.coordinates[0] = standardized.x;\n      geometry.dimensions[0] = standardized.width;\n    } else {\n      /**\n       * Geometry is in the form\n       * {\n       *   coordinates: [[[chr1,gene1], [chr2,gene2]], <y-coord handled in _modifyGenomicRangeY>]\n       *   dimensions: [<ignored value>, <height handled elsewhere>]\n       * }\n       *\n       * and is transformed to\n       * {\n       *   coordinates: [x-coord between -1 and 1, <y handled elsewhere>]\n       *   dimensions: [width, <height handled elsewhere>]\n       * }\n       */\n\n      const standardized = transformGenomicRangeToStandard(\n        {\n          x: geometry.coordinates[0],\n          y: 0,\n        },\n        this.schemaObject.xScale,\n        this.schemaObject.yScale\n      );\n      geometry.coordinates[0] = standardized.x;\n      geometry.dimensions[0] = standardized.width;\n    }\n  }\n\n  _modifyGenomicRangeY(geometry) {\n    // See comments in _modifyGenomicRangeX\n\n    if (this.trackObject.track.mark === \"arc\") {\n      const standardized = transformGenomicRangeArcToStandard(\n        {\n          x: 0,\n          y: geometry.coordinates[1],\n          width: 0,\n          height: geometry.coordinates[1],\n        },\n        this.schemaObject.xScale,\n        this.schemaObject.yScale\n      );\n\n      geometry.coordinates[1] = standardized.y;\n      geometry.dimensions[1] = standardized.height;\n    } else {\n      const standardized = transformGenomicRangeToStandard(\n        {\n          x: 0,\n          y: geometry.coordinates[1],\n        },\n        this.schemaObject.xScale,\n        this.schemaObject.yScale\n      );\n      geometry.coordinates[1] = standardized.y;\n      geometry.dimensions[1] = standardized.height;\n    }\n  }\n}\n\nexport default GeometryMapper;\n","import SchemaProcessor from \"./schema-processor\";\n\nimport Flatbush from \"flatbush\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { polygon } from \"@turf/helpers\";\nimport simplify from \"@turf/simplify\";\nimport GeometryMapper from \"./geometry-mapper\";\n\nclass DataProcessor {\n  /**\n   * A class meant to handle processing of data used in the scatterplot.\n   *\n   * @param {Array} data the processor is meant to handle and index\n   */\n  constructor(schema) {\n    this.schema = schema;\n\n    console.log(\"Loading data...\");\n\n    new SchemaProcessor(schema, this.indexData.bind(this));\n  }\n\n  /**\n   * Callback function that occurs after the schema processor has loaded the appropriate data\n   *\n   * @param {SchemaProcessor} schemaHelper that is built in the constructor\n   */\n  indexData(schemaHelper) {\n    let totalPoints = 0;\n\n    for (const track of schemaHelper.tracks) {\n      if (!track.hasOwnData) {\n        // index at 1 means a header needs to be skipped\n        totalPoints +=\n          track.index === 1 ? track.data.length - 1 : track.data.length;\n        break;\n      }\n    }\n    schemaHelper.tracks\n      .filter((track) => track.hasOwnData)\n      .forEach(\n        (track) =>\n          (totalPoints +=\n            track.index === 1 ? track.data.length - 1 : track.data.length)\n      );\n\n    this.index = new Flatbush(totalPoints);\n    this.data = [];\n    console.log(\"Reading data...\");\n\n    // Process the global data in the schema processor\n    if (schemaHelper.data) {\n      for (let track of schemaHelper.tracks) {\n        if (!track.hasOwnData) {\n          const geometryMapper = new GeometryMapper(schemaHelper, track);\n\n          let currentPoint = track.getNextDataPoint();\n          while (currentPoint) {\n            geometryMapper.modifyGeometry(currentPoint.geometry);\n\n            this.data[\n              this.index.add(\n                currentPoint.geometry.coordinates[0],\n                currentPoint.geometry.coordinates[1],\n                currentPoint.geometry.coordinates[0] +\n                  currentPoint.geometry.dimensions[0],\n                currentPoint.geometry.coordinates[1] +\n                  currentPoint.geometry.dimensions[1]\n              )\n            ] = currentPoint;\n\n            currentPoint = track.getNextDataPoint();\n          }\n          break;\n        }\n      }\n    }\n\n    // Process the data that is local to each track\n    schemaHelper.tracks\n      .filter((track) => track.hasOwnData)\n      .forEach((track) => {\n        const geometryMapper = new GeometryMapper(schemaHelper, track);\n\n        let currentPoint = track.getNextDataPoint();\n        while (currentPoint) {\n          geometryMapper.modifyGeometry(currentPoint.geometry);\n\n          this.data[\n            this.index.add(\n              currentPoint.geometry.coordinates[0],\n              currentPoint.geometry.coordinates[1],\n              currentPoint.geometry.coordinates[0] +\n                currentPoint.geometry.dimensions[0],\n              currentPoint.geometry.coordinates[1] +\n                currentPoint.geometry.dimensions[1]\n            )\n          ] = currentPoint;\n\n          currentPoint = track.getNextDataPoint();\n        }\n      });\n\n    console.log(\"Indexing data...\");\n    this.index.finish();\n\n    console.log(\"Data processing complete.\");\n  }\n\n  /**\n   * Find the closest point in the data to a given point. Only finds point if it is\n   * sufficiently close.\n   *\n   * @param {Array} point of two floats to find closest point to\n   * @returns closest point or undefined\n   */\n  getClosestPoint(point) {\n    return this.data[this.index.neighbors(point[0], point[1], 1)];\n  }\n\n  /**\n   * Get points within a bounding box.\n   *\n   * @param {Array} points Bounding rectangle in the format of [x1, y1, x2, y2]\n   * @returns points in bounding box\n   */\n  selectBox(points) {\n    const smallerX = Math.min(points[0], points[2]);\n    const smallerY = Math.min(points[1], points[3]);\n    const largerX = Math.max(points[0], points[2]);\n    const largerY = Math.max(points[1], points[3]);\n\n    return this.index\n      .search(smallerX, smallerY, largerX, largerY)\n      .map((i) => this.data[i]);\n  }\n\n  /**\n   * Select points inside a given polygon. Simplify polygon with {@link @turf/simplify}\n   * which may cause precision issues with very complex polygons. Uses {@link turf}\n   * to determine what points are in polygon.\n   *\n   * @param {Array} points of a polygon to select points format: [x1,y1,x2,y2,x3,y3,...]\n   * @returns points inside lasso\n   */\n  selectLasso(points) {\n    let smallestX = Number.POSITIVE_INFINITY;\n    let largestX = Number.NEGATIVE_INFINITY;\n    let smallestY = Number.POSITIVE_INFINITY;\n    let largestY = Number.NEGATIVE_INFINITY;\n    const polygonPoints = [];\n    for (let i = 0; i < points.length; i += 2) {\n      if (points[i] < smallestX) smallestX = points[i];\n      if (points[i] > largestX) largestX = points[i];\n      if (points[i + 1] < smallestY) smallestY = points[i + 1];\n      if (points[i + 1] > largestY) largestY = points[i + 1];\n      polygonPoints.push([points[i], points[i + 1]]);\n    }\n\n    polygonPoints.push([...polygonPoints[0]]); // First and last must be same position\n\n    const candidatePoints = this.selectBox([\n      smallestX,\n      smallestY,\n      largestX,\n      largestY,\n    ]);\n\n    const boundingPolygon = polygon([polygonPoints]);\n\n    const simplifiedBoundingPolygon = simplify(boundingPolygon, {\n      tolerance: 0.01,\n      highQuality: false,\n    });\n\n    return candidatePoints.filter((point) => {\n      return booleanPointInPolygon(\n        point.geometry.coordinates,\n        simplifiedBoundingPolygon\n      );\n    });\n  }\n}\n\nexport default DataProcessor;\n","/**\n * The data processor worker is meant to be an interface between the main thread\n * containing the {@link WebGLVis} a {@link DataProcessor}. It's main purpose\n * is to receive messages from the WebGLVis, call the appropriate method of\n * the DataProcessor, then post a message of the results of the method back to\n * the WebGLVis.\n */\n\nimport DataProcessor from \"./data-processor\";\n\nself.onmessage = (message) => {\n  switch (message.data.type) {\n    case \"init\":\n      self.processor = new DataProcessor(message.data.schema);\n      break;\n    case \"selectBox\":\n      postMessage({\n        type: message.data.type,\n        selection: self.processor.selectBox(message.data.points),\n        bounds: message.data.points,\n      });\n      break;\n    case \"selectLasso\":\n      postMessage({\n        type: message.data.type,\n        selection: self.processor.selectLasso(message.data.points),\n        bounds: message.data.points,\n      });\n      break;\n    case \"getClosestPoint\":\n      postMessage({\n        type: message.data.type,\n        point: self.processor.getClosestPoint(message.data.point),\n      });\n      break;\n    default:\n      console.error(`Received unknown message type: ${message.type}`);\n  }\n};\n"],"names":["constructor","ids","values","length","clear","push","id","value","pos","parent","parentValue","pop","undefined","top","halfLength","left","right","bestIndex","bestValue","rightValue","peek","peekValue","$b31f345e5a6edb41e082b70a5e13a40c$var$ARRAY_TYPES","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","$b31f345e5a6edb41e082b70a5e13a40c$var$VERSION","from","data","ArrayBuffer","Error","magic","versionAndType","nodeSize","numItems","$b31f345e5a6edb41e082b70a5e13a40c$export$default","ArrayType","isNaN","Math","min","max","n","numNodes","_levelBounds","ceil","IndexArrayType","arrayTypeIndex","indexOf","nodesByteSize","BYTES_PER_ELEMENT","_boxes","_indices","_pos","minX","minY","maxX","maxY","Infinity","set","_queue","add","index","finish","width","height","hilbertValues","hilbertMax","i","x","floor","y","$b31f345e5a6edb41e082b70a5e13a40c$var$hilbert","$b31f345e5a6edb41e082b70a5e13a40c$var$sort","end","nodeIndex","nodeMinX","nodeMinY","nodeMaxX","nodeMaxY","search","filterFn","queue","results","$b31f345e5a6edb41e082b70a5e13a40c$var$upperBound","neighbors","maxResults","maxDistance","q","maxDistSquared","dx","$b31f345e5a6edb41e082b70a5e13a40c$var$axisDist","dy","dist","k","arr","j","m","boxes","indices","pivot","$b31f345e5a6edb41e082b70a5e13a40c$var$swap","temp","a","b","c","d","e","A","B","C","D","i0","i1","$362d22883e0fd86686aa42c664ee2ee2$export$earthRadius","$362d22883e0fd86686aa42c664ee2ee2$export$factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","$362d22883e0fd86686aa42c664ee2ee2$export$areaFactors","acres","hectares","geom","properties","options","feat","type","bbox","geometry","coordinates","Array","isArray","$362d22883e0fd86686aa42c664ee2ee2$export$isNumber","$362d22883e0fd86686aa42c664ee2ee2$export$feature","_i","coordinates_1","ring","features","fc","units","factor","distance","PI","num","input","Object","coord","coords","$c2991e57ce450f3b8cf95c6853e7a8c7$export$containsNumber","geojson","_name","point","polygon","pt","polys","$f99903ca6b6ebae475a2ceb9985c2665$var$inBBox","insidePoly","$f99903ca6b6ebae475a2ceb9985c2665$var$inRing","ignoreBoundary","inHole","isInside","slice","xi","yi","xj","yj","onBoundary","intersect","mutate","newCoords","$d16b20bb8256ea97e35dad84d8331884$var$cleanLine","forEach","line","polygons","polyPoints","existing","key","join","hasOwnProperty","points","$d16b20bb8256ea97e35dad84d8331884$var$equals","newPoints","secondToLast","newPointsLength","prevAddedPoint","$d16b20bb8256ea97e35dad84d8331884$var$isPointOnLineSegment","splice","pt1","pt2","start","startX","startY","endX","endY","dxc","dyc","dxl","dyl","cross","abs","$d96c902724926d7517e39719852e5262$var$cloneFeature","$d96c902724926d7517e39719852e5262$var$cloneFeatureCollection","$d96c902724926d7517e39719852e5262$var$cloneGeometry","cloned","keys","$d96c902724926d7517e39719852e5262$var$cloneProperties","map","item","feature","geometries","g","$d96c902724926d7517e39719852e5262$var$deepSlice","callback","excludeWrapCoord","l","stopG","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","$364b0753f5a881456384b31c1527bf34$export$coordEach","initialValue","previousValue","currentCoord","$364b0753f5a881456384b31c1527bf34$export$propEach","currentProperties","$364b0753f5a881456384b31c1527bf34$export$featureEach","currentFeature","featureProperties","featureBBox","featureId","$364b0753f5a881456384b31c1527bf34$export$geomEach","currentGeometry","coordinate","$364b0753f5a881456384b31c1527bf34$export$flattenEach","feature$$1","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","started","$364b0753f5a881456384b31c1527bf34$export$segmentEach","$364b0753f5a881456384b31c1527bf34$export$lineEach","currentLine","p1","p2","p","t","sqTolerance","prevPoint","len","$e13ada66fa7c4e11a60260c32accc77e$var$getSqDist","first","last","simplified","maxSqDist","sqDist","$e13ada66fa7c4e11a60260c32accc77e$var$getSqSegDist","$e13ada66fa7c4e11a60260c32accc77e$var$simplifyDPStep","tolerance","highestQuality","$e13ada66fa7c4e11a60260c32accc77e$var$simplifyRadialDist","$e13ada66fa7c4e11a60260c32accc77e$var$simplifyDouglasPeucker","highQuality","$e13ada66fa7c4e11a60260c32accc77e$var$simplifyGeom","$e13ada66fa7c4e11a60260c32accc77e$var$simplifyLine","lines","$e13ada66fa7c4e11a60260c32accc77e$var$simplifyPolygon","rings","$e13ada66fa7c4e11a60260c32accc77e$var$simplify","z","pts","simpleRing","$e13ada66fa7c4e11a60260c32accc77e$var$checkValidity","schemaObject","trackObject","track","xScale","yScale","viewportForSchema","schema","isGenomeScale","xDomainWidth","yDomainHeight","modifyGeometry","_modifyGenomicRangeX","_modifyStandardX","_modifyGenomicRangeY","_modifyStandardY","dimensions","mark","standardized","console","log","indexData","bind","schemaHelper","totalPoints","tracks","hasOwnData","filter","geometryMapper","currentPoint","getNextDataPoint","getClosestPoint","selectBox","smallerX","smallerY","largerX","largerY","selectLasso","smallestX","Number","POSITIVE_INFINITY","largestX","NEGATIVE_INFINITY","smallestY","largestY","polygonPoints","candidatePoints","boundingPolygon","simplifiedBoundingPolygon","self","onmessage","message","processor","postMessage","selection","bounds","error"],"version":3,"file":"data-processor-worker.b9547f75.js.map"}