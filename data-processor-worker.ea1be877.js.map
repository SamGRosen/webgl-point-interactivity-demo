{"mappings":"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","sources":["src/epiviz.gl/data-processor-worker.js","src/epiviz.gl/data-processor.js","node_modules/flatbush/index.js","node_modules/flatqueue/index.mjs","node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","node_modules/@turf/invariant/dist/es/index.js","node_modules/@turf/helpers/dist/es/index.js","node_modules/@turf/simplify/dist/es/index.js","node_modules/@turf/clean-coords/dist/es/index.js","node_modules/@turf/clone/dist/es/index.js","node_modules/@turf/meta/dist/es/index.js","src/epiviz.gl/geometry-mapper.js"],"sourcesContent":["/**\n * The data processor worker is meant to be an interface between the main thread\n * containing the {@link WebGLVis} a {@link DataProcessor}. It's main purpose\n * is to receive messages from the WebGLVis, call the appropriate method of\n * the DataProcessor, then post a message of the results of the method back to\n * the WebGLVis.\n */\n\nimport DataProcessor from \"./data-processor\";\n\nself.onmessage = (message) => {\n  switch (message.data.type) {\n    case \"init\":\n      self.processor = new DataProcessor(message.data.specification);\n      break;\n    case \"selectBox\":\n      postMessage({\n        type: message.data.type,\n        selection: self.processor.selectBox(message.data.points),\n        bounds: message.data.points,\n      });\n      break;\n    case \"selectLasso\":\n      postMessage({\n        type: message.data.type,\n        selection: self.processor.selectLasso(message.data.points),\n        bounds: message.data.points,\n      });\n      break;\n    case \"getClosestPoint\":\n    case \"getClickPoint\":\n      const result = self.processor.getClosestPoint(message.data.point);\n      postMessage({\n        type: message.data.type,\n        ...result,\n      });\n      break;\n    default:\n      console.error(`Received unknown message type: ${message.type}`);\n  }\n};\n","import SpecificationProcessor from \"./specification-processor\";\n\nimport Flatbush from \"flatbush\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { polygon } from \"@turf/helpers\";\nimport simplify from \"@turf/simplify\";\nimport GeometryMapper from \"./geometry-mapper\";\n\nclass DataProcessor {\n  /**\n   * A class meant to handle processing of data used in the scatterplot.\n   *\n   * @param {Array} data the processor is meant to handle and index\n   */\n  constructor(specification) {\n    this.specification = specification;\n\n    console.log(\"Loading data...\");\n\n    new SpecificationProcessor(specification, this.indexData.bind(this));\n  }\n\n  /**\n   * Callback function that occurs after the specification processor has loaded the appropriate data\n   *\n   * @param {SpecificationProcessor} specificationHelper that is built in the constructor\n   */\n  indexData(specificationHelper) {\n    let totalPoints = 0;\n\n    for (const track of specificationHelper.tracks) {\n      if (!track.hasOwnData) {\n        // index at 1 means a header needs to be skipped\n        totalPoints +=\n          track.index === 1 ? track.data.length - 1 : track.data.length;\n        break;\n      }\n    }\n    specificationHelper.tracks\n      .filter((track) => track.hasOwnData)\n      .forEach(\n        (track) =>\n          (totalPoints +=\n            track.index === 1 ? track.data.length - 1 : track.data.length)\n      );\n\n    this.index = new Flatbush(totalPoints);\n    this.data = [];\n    console.log(\"Reading data...\");\n\n    // Process the global data in the specification processor\n    if (specificationHelper.data) {\n      for (let track of specificationHelper.tracks) {\n        if (!track.hasOwnData) {\n          const geometryMapper = new GeometryMapper(specificationHelper, track);\n\n          let currentPoint = track.getNextDataPoint();\n          while (currentPoint) {\n            geometryMapper.modifyGeometry(currentPoint.geometry);\n\n            this.data[\n              this.index.add(\n                currentPoint.geometry.coordinates[0],\n                currentPoint.geometry.coordinates[1],\n                currentPoint.geometry.coordinates[0] +\n                  currentPoint.geometry.dimensions[0],\n                currentPoint.geometry.coordinates[1] +\n                  currentPoint.geometry.dimensions[1]\n              )\n            ] = currentPoint;\n\n            currentPoint = track.getNextDataPoint();\n          }\n          break;\n        }\n      }\n    }\n\n    // Process the data that is local to each track\n    specificationHelper.tracks\n      .filter((track) => track.hasOwnData)\n      .forEach((track) => {\n        const geometryMapper = new GeometryMapper(specificationHelper, track);\n\n        let currentPoint = track.getNextDataPoint();\n        while (currentPoint) {\n          geometryMapper.modifyGeometry(currentPoint.geometry);\n\n          this.data[\n            this.index.add(\n              currentPoint.geometry.coordinates[0],\n              currentPoint.geometry.coordinates[1],\n              currentPoint.geometry.coordinates[0] +\n                currentPoint.geometry.dimensions[0],\n              currentPoint.geometry.coordinates[1] +\n                currentPoint.geometry.dimensions[1]\n            )\n          ] = currentPoint;\n\n          currentPoint = track.getNextDataPoint();\n        }\n      });\n\n    console.log(\"Indexing data...\");\n    this.index.finish();\n\n    console.log(\"Data processing complete.\");\n  }\n\n  /**\n   * Find the closest point in the data to a given point.\n   *\n   * @param {Array} point of two floats to find closest point to\n   * @returns closest point or undefined\n   */\n  getClosestPoint(point) {\n    let indices = this.index.neighbors(point[0], point[1], 1, 0)\n    let pointToReturn =\n      this.data[indices];\n    let distance = 0;\n    let isInside = true;\n    if (pointToReturn === undefined) {\n      indices = this.index.neighbors(point[0], point[1], 1, 5)\n      if(indices.length === 0) {\n        indices = this.index.neighbors(point[0], point[1], 1)\n      }\n      pointToReturn = this.data[indices];\n      distance = Math.sqrt(\n        (pointToReturn.geometry.coordinates[0] - point[0]) ** 2 +\n          (pointToReturn.geometry.coordinates[1] - point[1]) ** 2\n      );\n      isInside = false;\n    }\n    return { closestPoint: pointToReturn, distance, isInside, indices };\n  }\n\n  /**\n   * Get points within a bounding box.\n   *\n   * @param {Array} points Bounding rectangle in the format of [x1, y1, x2, y2]\n   * @returns points in bounding box\n   */\n  selectBox(points) {\n    const smallerX = Math.min(points[0], points[2]);\n    const smallerY = Math.min(points[1], points[3]);\n    const largerX = Math.max(points[0], points[2]);\n    const largerY = Math.max(points[1], points[3]);\n\n    let indices = this.index\n      .search(smallerX, smallerY, largerX, largerY)\n    \n    let tpoints =  indices.map((i) => this.data[i]);\n\n    return {indices, \"points\": tpoints};\n  }\n\n  /**\n   * Select points inside a given polygon. Simplify polygon with {@link @turf/simplify}\n   * which may cause precision issues with very complex polygons. Uses {@link turf}\n   * to determine what points are in polygon.\n   *\n   * @param {Array} points of a polygon to select points format: [x1,y1,x2,y2,x3,y3,...]\n   * @returns points inside lasso\n   */\n  selectLasso(points) {\n    let smallestX = Number.POSITIVE_INFINITY;\n    let largestX = Number.NEGATIVE_INFINITY;\n    let smallestY = Number.POSITIVE_INFINITY;\n    let largestY = Number.NEGATIVE_INFINITY;\n    const polygonPoints = [];\n    for (let i = 0; i < points.length; i += 2) {\n      if (points[i] < smallestX) smallestX = points[i];\n      if (points[i] > largestX) largestX = points[i];\n      if (points[i + 1] < smallestY) smallestY = points[i + 1];\n      if (points[i + 1] > largestY) largestY = points[i + 1];\n      polygonPoints.push([points[i], points[i + 1]]);\n    }\n\n    polygonPoints.push([...polygonPoints[0]]); // First and last must be same position\n\n    const candidatePoints = this.selectBox([\n      smallestX,\n      smallestY,\n      largestX,\n      largestY,\n    ]);\n\n    const boundingPolygon = polygon([polygonPoints]);\n\n    const simplifiedBoundingPolygon = simplify(boundingPolygon, {\n      tolerance: 0.01,\n      highQuality: false,\n    });\n\n    let findices = [];\n    let fpoints = candidatePoints.points.filter((point, i) => {\n      let tbool = booleanPointInPolygon(\n        point.geometry.coordinates,\n        simplifiedBoundingPolygon\n      );\n\n      if (tbool) findices.push(candidatePoints.indices[i])\n\n      return tbool;\n    });\n\n    return {\"indices\": findices, \"points\": fpoints}\n  }\n}\n\nexport default DataProcessor;\n","\nimport FlatQueue from 'flatqueue';\n\nconst ARRAY_TYPES = [\n    Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,\n    Int32Array, Uint32Array, Float32Array, Float64Array\n];\n\nconst VERSION = 3; // serialized format version\n\nexport default class Flatbush {\n\n    static from(data) {\n        if (!(data instanceof ArrayBuffer)) {\n            throw new Error('Data must be an instance of ArrayBuffer.');\n        }\n        const [magic, versionAndType] = new Uint8Array(data, 0, 2);\n        if (magic !== 0xfb) {\n            throw new Error('Data does not appear to be in a Flatbush format.');\n        }\n        if (versionAndType >> 4 !== VERSION) {\n            throw new Error(`Got v${versionAndType >> 4} data when expected v${VERSION}.`);\n        }\n        const [nodeSize] = new Uint16Array(data, 2, 1);\n        const [numItems] = new Uint32Array(data, 4, 1);\n\n        return new Flatbush(numItems, nodeSize, ARRAY_TYPES[versionAndType & 0x0f], data);\n    }\n\n    constructor(numItems, nodeSize = 16, ArrayType = Float64Array, data) {\n        if (numItems === undefined) throw new Error('Missing required argument: numItems.');\n        if (isNaN(numItems) || numItems <= 0) throw new Error(`Unpexpected numItems value: ${numItems}.`);\n\n        this.numItems = +numItems;\n        this.nodeSize = Math.min(Math.max(+nodeSize, 2), 65535);\n\n        // calculate the total number of nodes in the R-tree to allocate space for\n        // and the index of each tree level (used in search later)\n        let n = numItems;\n        let numNodes = n;\n        this._levelBounds = [n * 4];\n        do {\n            n = Math.ceil(n / this.nodeSize);\n            numNodes += n;\n            this._levelBounds.push(numNodes * 4);\n        } while (n !== 1);\n\n        this.ArrayType = ArrayType || Float64Array;\n        this.IndexArrayType = numNodes < 16384 ? Uint16Array : Uint32Array;\n\n        const arrayTypeIndex = ARRAY_TYPES.indexOf(this.ArrayType);\n        const nodesByteSize = numNodes * 4 * this.ArrayType.BYTES_PER_ELEMENT;\n\n        if (arrayTypeIndex < 0) {\n            throw new Error(`Unexpected typed array class: ${ArrayType}.`);\n        }\n\n        if (data && (data instanceof ArrayBuffer)) {\n            this.data = data;\n            this._boxes = new this.ArrayType(this.data, 8, numNodes * 4);\n            this._indices = new this.IndexArrayType(this.data, 8 + nodesByteSize, numNodes);\n\n            this._pos = numNodes * 4;\n            this.minX = this._boxes[this._pos - 4];\n            this.minY = this._boxes[this._pos - 3];\n            this.maxX = this._boxes[this._pos - 2];\n            this.maxY = this._boxes[this._pos - 1];\n\n        } else {\n            this.data = new ArrayBuffer(8 + nodesByteSize + numNodes * this.IndexArrayType.BYTES_PER_ELEMENT);\n            this._boxes = new this.ArrayType(this.data, 8, numNodes * 4);\n            this._indices = new this.IndexArrayType(this.data, 8 + nodesByteSize, numNodes);\n            this._pos = 0;\n            this.minX = Infinity;\n            this.minY = Infinity;\n            this.maxX = -Infinity;\n            this.maxY = -Infinity;\n\n            new Uint8Array(this.data, 0, 2).set([0xfb, (VERSION << 4) + arrayTypeIndex]);\n            new Uint16Array(this.data, 2, 1)[0] = nodeSize;\n            new Uint32Array(this.data, 4, 1)[0] = numItems;\n        }\n\n        // a priority queue for k-nearest-neighbors queries\n        this._queue = new FlatQueue();\n    }\n\n    add(minX, minY, maxX, maxY) {\n        const index = this._pos >> 2;\n        this._indices[index] = index;\n        this._boxes[this._pos++] = minX;\n        this._boxes[this._pos++] = minY;\n        this._boxes[this._pos++] = maxX;\n        this._boxes[this._pos++] = maxY;\n\n        if (minX < this.minX) this.minX = minX;\n        if (minY < this.minY) this.minY = minY;\n        if (maxX > this.maxX) this.maxX = maxX;\n        if (maxY > this.maxY) this.maxY = maxY;\n\n        return index;\n    }\n\n    finish() {\n        if (this._pos >> 2 !== this.numItems) {\n            throw new Error(`Added ${this._pos >> 2} items when expected ${this.numItems}.`);\n        }\n\n        if (this.numItems <= this.nodeSize) {\n            // only one node, skip sorting and just fill the root box\n            this._boxes[this._pos++] = this.minX;\n            this._boxes[this._pos++] = this.minY;\n            this._boxes[this._pos++] = this.maxX;\n            this._boxes[this._pos++] = this.maxY;\n            return;\n        }\n\n        const width = this.maxX - this.minX;\n        const height = this.maxY - this.minY;\n        const hilbertValues = new Uint32Array(this.numItems);\n        const hilbertMax = (1 << 16) - 1;\n\n        // map item centers into Hilbert coordinate space and calculate Hilbert values\n        for (let i = 0; i < this.numItems; i++) {\n            let pos = 4 * i;\n            const minX = this._boxes[pos++];\n            const minY = this._boxes[pos++];\n            const maxX = this._boxes[pos++];\n            const maxY = this._boxes[pos++];\n            const x = Math.floor(hilbertMax * ((minX + maxX) / 2 - this.minX) / width);\n            const y = Math.floor(hilbertMax * ((minY + maxY) / 2 - this.minY) / height);\n            hilbertValues[i] = hilbert(x, y);\n        }\n\n        // sort items by their Hilbert value (for packing later)\n        sort(hilbertValues, this._boxes, this._indices, 0, this.numItems - 1, this.nodeSize);\n\n        // generate nodes at each tree level, bottom-up\n        for (let i = 0, pos = 0; i < this._levelBounds.length - 1; i++) {\n            const end = this._levelBounds[i];\n\n            // generate a parent node for each block of consecutive <nodeSize> nodes\n            while (pos < end) {\n                const nodeIndex = pos;\n\n                // calculate bbox for the new node\n                let nodeMinX = Infinity;\n                let nodeMinY = Infinity;\n                let nodeMaxX = -Infinity;\n                let nodeMaxY = -Infinity;\n                for (let i = 0; i < this.nodeSize && pos < end; i++) {\n                    nodeMinX = Math.min(nodeMinX, this._boxes[pos++]);\n                    nodeMinY = Math.min(nodeMinY, this._boxes[pos++]);\n                    nodeMaxX = Math.max(nodeMaxX, this._boxes[pos++]);\n                    nodeMaxY = Math.max(nodeMaxY, this._boxes[pos++]);\n                }\n\n                // add the new node to the tree data\n                this._indices[this._pos >> 2] = nodeIndex;\n                this._boxes[this._pos++] = nodeMinX;\n                this._boxes[this._pos++] = nodeMinY;\n                this._boxes[this._pos++] = nodeMaxX;\n                this._boxes[this._pos++] = nodeMaxY;\n            }\n        }\n    }\n\n    search(minX, minY, maxX, maxY, filterFn) {\n        if (this._pos !== this._boxes.length) {\n            throw new Error('Data not yet indexed - call index.finish().');\n        }\n\n        let nodeIndex = this._boxes.length - 4;\n        const queue = [];\n        const results = [];\n\n        while (nodeIndex !== undefined) {\n            // find the end index of the node\n            const end = Math.min(nodeIndex + this.nodeSize * 4, upperBound(nodeIndex, this._levelBounds));\n\n            // search through child nodes\n            for (let pos = nodeIndex; pos < end; pos += 4) {\n                const index = this._indices[pos >> 2] | 0;\n\n                // check if node bbox intersects with query bbox\n                if (maxX < this._boxes[pos]) continue; // maxX < nodeMinX\n                if (maxY < this._boxes[pos + 1]) continue; // maxY < nodeMinY\n                if (minX > this._boxes[pos + 2]) continue; // minX > nodeMaxX\n                if (minY > this._boxes[pos + 3]) continue; // minY > nodeMaxY\n\n                if (nodeIndex < this.numItems * 4) {\n                    if (filterFn === undefined || filterFn(index)) {\n                        results.push(index); // leaf item\n                    }\n\n                } else {\n                    queue.push(index); // node; add it to the search queue\n                }\n            }\n\n            nodeIndex = queue.pop();\n        }\n\n        return results;\n    }\n\n    neighbors(x, y, maxResults = Infinity, maxDistance = Infinity, filterFn) {\n        if (this._pos !== this._boxes.length) {\n            throw new Error('Data not yet indexed - call index.finish().');\n        }\n\n        let nodeIndex = this._boxes.length - 4;\n        const q = this._queue;\n        const results = [];\n        const maxDistSquared = maxDistance * maxDistance;\n\n        while (nodeIndex !== undefined) {\n            // find the end index of the node\n            const end = Math.min(nodeIndex + this.nodeSize * 4, upperBound(nodeIndex, this._levelBounds));\n\n            // add child nodes to the queue\n            for (let pos = nodeIndex; pos < end; pos += 4) {\n                const index = this._indices[pos >> 2] | 0;\n\n                const dx = axisDist(x, this._boxes[pos], this._boxes[pos + 2]);\n                const dy = axisDist(y, this._boxes[pos + 1], this._boxes[pos + 3]);\n                const dist = dx * dx + dy * dy;\n\n                if (nodeIndex < this.numItems * 4) { // leaf node\n                    if (filterFn === undefined || filterFn(index)) {\n                        // put a negative index if it's an item rather than a node, to recognize later\n                        q.push(-index - 1, dist);\n                    }\n                } else {\n                    q.push(index, dist);\n                }\n            }\n\n            // pop items from the queue\n            while (q.length && q.peek() < 0) {\n                const dist = q.peekValue();\n                if (dist > maxDistSquared) {\n                    q.clear();\n                    return results;\n                }\n                results.push(-q.pop() - 1);\n\n                if (results.length === maxResults) {\n                    q.clear();\n                    return results;\n                }\n            }\n\n            nodeIndex = q.pop();\n        }\n\n        q.clear();\n        return results;\n    }\n}\n\nfunction axisDist(k, min, max) {\n    return k < min ? min - k : k <= max ? 0 : k - max;\n}\n\n// binary search for the first value in the array bigger than the given\nfunction upperBound(value, arr) {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        const m = (i + j) >> 1;\n        if (arr[m] > value) {\n            j = m;\n        } else {\n            i = m + 1;\n        }\n    }\n    return arr[i];\n}\n\n// custom quicksort that partially sorts bbox data alongside the hilbert values\nfunction sort(values, boxes, indices, left, right, nodeSize) {\n    if (Math.floor(left / nodeSize) >= Math.floor(right / nodeSize)) return;\n\n    const pivot = values[(left + right) >> 1];\n    let i = left - 1;\n    let j = right + 1;\n\n    while (true) {\n        do i++; while (values[i] < pivot);\n        do j--; while (values[j] > pivot);\n        if (i >= j) break;\n        swap(values, boxes, indices, i, j);\n    }\n\n    sort(values, boxes, indices, left, j, nodeSize);\n    sort(values, boxes, indices, j + 1, right, nodeSize);\n}\n\n// swap two values and two corresponding boxes\nfunction swap(values, boxes, indices, i, j) {\n    const temp = values[i];\n    values[i] = values[j];\n    values[j] = temp;\n\n    const k = 4 * i;\n    const m = 4 * j;\n\n    const a = boxes[k];\n    const b = boxes[k + 1];\n    const c = boxes[k + 2];\n    const d = boxes[k + 3];\n    boxes[k] = boxes[m];\n    boxes[k + 1] = boxes[m + 1];\n    boxes[k + 2] = boxes[m + 2];\n    boxes[k + 3] = boxes[m + 3];\n    boxes[m] = a;\n    boxes[m + 1] = b;\n    boxes[m + 2] = c;\n    boxes[m + 3] = d;\n\n    const e = indices[i];\n    indices[i] = indices[j];\n    indices[j] = e;\n}\n\n// Fast Hilbert curve algorithm by http://threadlocalmutex.com/\n// Ported from C++ https://github.com/rawrunprotected/hilbert_curves (public domain)\nfunction hilbert(x, y) {\n    let a = x ^ y;\n    let b = 0xFFFF ^ a;\n    let c = 0xFFFF ^ (x | y);\n    let d = x & (y ^ 0xFFFF);\n\n    let A = a | (b >> 1);\n    let B = (a >> 1) ^ a;\n    let C = ((c >> 1) ^ (b & (d >> 1))) ^ c;\n    let D = ((a & (c >> 1)) ^ (d >> 1)) ^ d;\n\n    a = A; b = B; c = C; d = D;\n    A = ((a & (a >> 2)) ^ (b & (b >> 2)));\n    B = ((a & (b >> 2)) ^ (b & ((a ^ b) >> 2)));\n    C ^= ((a & (c >> 2)) ^ (b & (d >> 2)));\n    D ^= ((b & (c >> 2)) ^ ((a ^ b) & (d >> 2)));\n\n    a = A; b = B; c = C; d = D;\n    A = ((a & (a >> 4)) ^ (b & (b >> 4)));\n    B = ((a & (b >> 4)) ^ (b & ((a ^ b) >> 4)));\n    C ^= ((a & (c >> 4)) ^ (b & (d >> 4)));\n    D ^= ((b & (c >> 4)) ^ ((a ^ b) & (d >> 4)));\n\n    a = A; b = B; c = C; d = D;\n    C ^= ((a & (c >> 8)) ^ (b & (d >> 8)));\n    D ^= ((b & (c >> 8)) ^ ((a ^ b) & (d >> 8)));\n\n    a = C ^ (C >> 1);\n    b = D ^ (D >> 1);\n\n    let i0 = x ^ y;\n    let i1 = b | (0xFFFF ^ (i0 | a));\n\n    i0 = (i0 | (i0 << 8)) & 0x00FF00FF;\n    i0 = (i0 | (i0 << 4)) & 0x0F0F0F0F;\n    i0 = (i0 | (i0 << 2)) & 0x33333333;\n    i0 = (i0 | (i0 << 1)) & 0x55555555;\n\n    i1 = (i1 | (i1 << 8)) & 0x00FF00FF;\n    i1 = (i1 | (i1 << 4)) & 0x0F0F0F0F;\n    i1 = (i1 | (i1 << 2)) & 0x33333333;\n    i1 = (i1 | (i1 << 1)) & 0x55555555;\n\n    return ((i1 << 1) | i0) >>> 0;\n}\n","\nexport default class FlatQueue {\n\n    constructor() {\n        this.ids = [];\n        this.values = [];\n        this.length = 0;\n    }\n\n    clear() {\n        this.length = 0;\n    }\n\n    push(id, value) {\n        let pos = this.length++;\n        this.ids[pos] = id;\n        this.values[pos] = value;\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const parentValue = this.values[parent];\n            if (value >= parentValue) break;\n            this.ids[pos] = this.ids[parent];\n            this.values[pos] = parentValue;\n            pos = parent;\n        }\n\n        this.ids[pos] = id;\n        this.values[pos] = value;\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.ids[0];\n        this.length--;\n\n        if (this.length > 0) {\n            const id = this.ids[0] = this.ids[this.length];\n            const value = this.values[0] = this.values[this.length];\n            const halfLength = this.length >> 1;\n            let pos = 0;\n\n            while (pos < halfLength) {\n                let left = (pos << 1) + 1;\n                const right = left + 1;\n                let bestIndex = this.ids[left];\n                let bestValue = this.values[left];\n                const rightValue = this.values[right];\n\n                if (right < this.length && rightValue < bestValue) {\n                    left = right;\n                    bestIndex = this.ids[right];\n                    bestValue = rightValue;\n                }\n                if (bestValue >= value) break;\n\n                this.ids[pos] = bestIndex;\n                this.values[pos] = bestValue;\n                pos = left;\n            }\n\n            this.ids[pos] = id;\n            this.values[pos] = value;\n        }\n\n        return top;\n    }\n\n    peek() {\n        if (this.length === 0) return undefined;\n        return this.ids[0];\n    }\n\n    peekValue() {\n        if (this.length === 0) return undefined;\n        return this.values[0];\n    }\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import cleanCoords from '@turf/clean-coords';\nimport clone from '@turf/clone';\nimport { geomEach } from '@turf/meta';\nimport { isObject } from '@turf/helpers';\n\n/*\n (c) 2013, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n  var dx = p1.x - p2.x,\n    dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n  var x = p1.x,\n    y = p1.y,\n    dx = p2.x - x,\n    dy = p2.y - y;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2.x;\n      y = p2.y;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p.x - x;\n  dy = p.y - y;\n\n  return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n  var prevPoint = points[0],\n    newPoints = [prevPoint],\n    point;\n\n  for (var i = 1, len = points.length; i < len; i++) {\n    point = points[i];\n\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n\n  if (prevPoint !== point) newPoints.push(point);\n\n  return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n  var maxSqDist = sqTolerance,\n    index;\n\n  for (var i = first + 1; i < last; i++) {\n    var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1)\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    simplified.push(points[index]);\n    if (last - index > 1)\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n  var last = points.length - 1;\n\n  var simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n  if (points.length <= 2) return points;\n\n  var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n\n  return points;\n}\n\n/**\n * Takes a {@link GeoJSON} object and returns a simplified version. Internally uses\n * [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.\n *\n * @name simplify\n * @param {GeoJSON} geojson object to be simplified\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.tolerance=1] simplification tolerance\n * @param {boolean} [options.highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} a simplified GeoJSON\n * @example\n * var geojson = turf.polygon([[\n *   [-70.603637, -33.399918],\n *   [-70.614624, -33.395332],\n *   [-70.639343, -33.392466],\n *   [-70.659942, -33.394759],\n *   [-70.683975, -33.404504],\n *   [-70.697021, -33.419406],\n *   [-70.701141, -33.434306],\n *   [-70.700454, -33.446339],\n *   [-70.694274, -33.458369],\n *   [-70.682601, -33.465816],\n *   [-70.668869, -33.472117],\n *   [-70.646209, -33.473835],\n *   [-70.624923, -33.472117],\n *   [-70.609817, -33.468107],\n *   [-70.595397, -33.458369],\n *   [-70.587158, -33.442901],\n *   [-70.587158, -33.426283],\n *   [-70.590591, -33.414248],\n *   [-70.594711, -33.406224],\n *   [-70.603637, -33.399918]\n * ]]);\n * var options = {tolerance: 0.01, highQuality: false};\n * var simplified = turf.simplify(geojson, options);\n *\n * //addToMap\n * var addToMap = [geojson, simplified]\n */\nfunction simplify$1(geojson, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var tolerance = options.tolerance !== undefined ? options.tolerance : 1;\n  var highQuality = options.highQuality || false;\n  var mutate = options.mutate || false;\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (tolerance && tolerance < 0) throw new Error(\"invalid tolerance\");\n\n  // Clone geojson to avoid side effects\n  if (mutate !== true) geojson = clone(geojson);\n\n  geomEach(geojson, function (geom) {\n    simplifyGeom(geom, tolerance, highQuality);\n  });\n  return geojson;\n}\n\n/**\n * Simplifies a feature's coordinates\n *\n * @private\n * @param {Geometry} geometry to be simplified\n * @param {number} [tolerance=1] simplification tolerance\n * @param {boolean} [highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\n * @returns {Geometry} output\n */\nfunction simplifyGeom(geometry, tolerance, highQuality) {\n  var type = geometry.type;\n\n  // \"unsimplyfiable\" geometry types\n  if (type === \"Point\" || type === \"MultiPoint\") return geometry;\n\n  // Remove any extra coordinates\n  cleanCoords(geometry, true);\n\n  var coordinates = geometry.coordinates;\n  switch (type) {\n    case \"LineString\":\n      geometry[\"coordinates\"] = simplifyLine(\n        coordinates,\n        tolerance,\n        highQuality\n      );\n      break;\n    case \"MultiLineString\":\n      geometry[\"coordinates\"] = coordinates.map(function (lines) {\n        return simplifyLine(lines, tolerance, highQuality);\n      });\n      break;\n    case \"Polygon\":\n      geometry[\"coordinates\"] = simplifyPolygon(\n        coordinates,\n        tolerance,\n        highQuality\n      );\n      break;\n    case \"MultiPolygon\":\n      geometry[\"coordinates\"] = coordinates.map(function (rings) {\n        return simplifyPolygon(rings, tolerance, highQuality);\n      });\n  }\n  return geometry;\n}\n\n/**\n * Simplifies the coordinates of a LineString with simplify-js\n *\n * @private\n * @param {Array<number>} coordinates to be processed\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\n * @returns {Array<Array<number>>} simplified coords\n */\nfunction simplifyLine(coordinates, tolerance, highQuality) {\n  return simplify(\n    coordinates.map(function (coord) {\n      return { x: coord[0], y: coord[1], z: coord[2] };\n    }),\n    tolerance,\n    highQuality\n  ).map(function (coords) {\n    return coords.z ? [coords.x, coords.y, coords.z] : [coords.x, coords.y];\n  });\n}\n\n/**\n * Simplifies the coordinates of a Polygon with simplify-js\n *\n * @private\n * @param {Array<number>} coordinates to be processed\n * @param {number} tolerance simplification tolerance\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\n * @returns {Array<Array<Array<number>>>} simplified coords\n */\nfunction simplifyPolygon(coordinates, tolerance, highQuality) {\n  return coordinates.map(function (ring) {\n    var pts = ring.map(function (coord) {\n      return { x: coord[0], y: coord[1] };\n    });\n    if (pts.length < 4) {\n      throw new Error(\"invalid polygon\");\n    }\n    var simpleRing = simplify(pts, tolerance, highQuality).map(function (\n      coords\n    ) {\n      return [coords.x, coords.y];\n    });\n    //remove 1 percent of tolerance until enough points to make a triangle\n    while (!checkValidity(simpleRing)) {\n      tolerance -= tolerance * 0.01;\n      simpleRing = simplify(pts, tolerance, highQuality).map(function (\n        coords\n      ) {\n        return [coords.x, coords.y];\n      });\n    }\n    if (\n      simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] ||\n      simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]\n    ) {\n      simpleRing.push(simpleRing[0]);\n    }\n    return simpleRing;\n  });\n}\n\n/**\n * Returns true if ring has at least 3 coordinates and its first coordinate is the same as its last\n *\n * @private\n * @param {Array<number>} ring coordinates to be checked\n * @returns {boolean} true if valid\n */\nfunction checkValidity(ring) {\n  if (ring.length < 3) return false;\n  //if the last point is the same as the first, it's not a triangle\n  return !(\n    ring.length === 3 &&\n    ring[2][0] === ring[0][0] &&\n    ring[2][1] === ring[0][1]\n  );\n}\n\nexport default simplify$1;\n","import { feature } from \"@turf/helpers\";\nimport { getCoords, getType } from \"@turf/invariant\";\n// To-Do => Improve Typescript GeoJSON handling\n/**\n * Removes redundant coordinates from any GeoJSON Geometry.\n *\n * @name cleanCoords\n * @param {Geometry|Feature} geojson Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated\n * @returns {Geometry|Feature} the cleaned input Feature/Geometry\n * @example\n * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);\n * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);\n *\n * turf.cleanCoords(line).geometry.coordinates;\n * //= [[0, 0], [0, 10]]\n *\n * turf.cleanCoords(multiPoint).geometry.coordinates;\n * //= [[0, 0], [2, 2]]\n */\nfunction cleanCoords(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Backwards compatible with v4.0\n    var mutate = typeof options === \"object\" ? options.mutate : options;\n    if (!geojson)\n        throw new Error(\"geojson is required\");\n    var type = getType(geojson);\n    // Store new \"clean\" points in this Array\n    var newCoords = [];\n    switch (type) {\n        case \"LineString\":\n            newCoords = cleanLine(geojson);\n            break;\n        case \"MultiLineString\":\n        case \"Polygon\":\n            getCoords(geojson).forEach(function (line) {\n                newCoords.push(cleanLine(line));\n            });\n            break;\n        case \"MultiPolygon\":\n            getCoords(geojson).forEach(function (polygons) {\n                var polyPoints = [];\n                polygons.forEach(function (ring) {\n                    polyPoints.push(cleanLine(ring));\n                });\n                newCoords.push(polyPoints);\n            });\n            break;\n        case \"Point\":\n            return geojson;\n        case \"MultiPoint\":\n            var existing = {};\n            getCoords(geojson).forEach(function (coord) {\n                var key = coord.join(\"-\");\n                if (!Object.prototype.hasOwnProperty.call(existing, key)) {\n                    newCoords.push(coord);\n                    existing[key] = true;\n                }\n            });\n            break;\n        default:\n            throw new Error(type + \" geometry not supported\");\n    }\n    // Support input mutation\n    if (geojson.coordinates) {\n        if (mutate === true) {\n            geojson.coordinates = newCoords;\n            return geojson;\n        }\n        return { type: type, coordinates: newCoords };\n    }\n    else {\n        if (mutate === true) {\n            geojson.geometry.coordinates = newCoords;\n            return geojson;\n        }\n        return feature({ type: type, coordinates: newCoords }, geojson.properties, {\n            bbox: geojson.bbox,\n            id: geojson.id,\n        });\n    }\n}\n/**\n * Clean Coords\n *\n * @private\n * @param {Array<number>|LineString} line Line\n * @returns {Array<number>} Cleaned coordinates\n */\nfunction cleanLine(line) {\n    var points = getCoords(line);\n    // handle \"clean\" segment\n    if (points.length === 2 && !equals(points[0], points[1]))\n        return points;\n    var newPoints = [];\n    var secondToLast = points.length - 1;\n    var newPointsLength = newPoints.length;\n    newPoints.push(points[0]);\n    for (var i = 1; i < secondToLast; i++) {\n        var prevAddedPoint = newPoints[newPoints.length - 1];\n        if (points[i][0] === prevAddedPoint[0] &&\n            points[i][1] === prevAddedPoint[1])\n            continue;\n        else {\n            newPoints.push(points[i]);\n            newPointsLength = newPoints.length;\n            if (newPointsLength > 2) {\n                if (isPointOnLineSegment(newPoints[newPointsLength - 3], newPoints[newPointsLength - 1], newPoints[newPointsLength - 2]))\n                    newPoints.splice(newPoints.length - 2, 1);\n            }\n        }\n    }\n    newPoints.push(points[points.length - 1]);\n    newPointsLength = newPoints.length;\n    if (equals(points[0], points[points.length - 1]) && newPointsLength < 4)\n        throw new Error(\"invalid polygon\");\n    if (isPointOnLineSegment(newPoints[newPointsLength - 3], newPoints[newPointsLength - 1], newPoints[newPointsLength - 2]))\n        newPoints.splice(newPoints.length - 2, 1);\n    return newPoints;\n}\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Position} pt1 point\n * @param {Position} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction equals(pt1, pt2) {\n    return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n/**\n * Returns if `point` is on the segment between `start` and `end`.\n * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)\n *\n * @private\n * @param {Position} start coord pair of start of line\n * @param {Position} end coord pair of end of line\n * @param {Position} point coord pair of point to check\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(start, end, point) {\n    var x = point[0], y = point[1];\n    var startX = start[0], startY = start[1];\n    var endX = end[0], endY = end[1];\n    var dxc = x - startX;\n    var dyc = y - startY;\n    var dxl = endX - startX;\n    var dyl = endY - startY;\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0)\n        return false;\n    else if (Math.abs(dxl) >= Math.abs(dyl))\n        return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;\n    else\n        return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;\n}\nexport default cleanCoords;\n","/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    switch (geojson.type) {\n        case \"Feature\":\n            return cloneFeature(geojson);\n        case \"FeatureCollection\":\n            return cloneFeatureCollection(geojson);\n        case \"Point\":\n        case \"LineString\":\n        case \"Polygon\":\n        case \"MultiPoint\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n        case \"GeometryCollection\":\n            return cloneGeometry(geojson);\n        default:\n            throw new Error(\"unknown GeoJSON type\");\n    }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\nfunction cloneFeature(geojson) {\n    var cloned = { type: \"Feature\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"properties\":\n            case \"geometry\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add properties & geometry last\n    cloned.properties = cloneProperties(geojson.properties);\n    cloned.geometry = cloneGeometry(geojson.geometry);\n    return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\nfunction cloneProperties(properties) {\n    var cloned = {};\n    if (!properties) {\n        return cloned;\n    }\n    Object.keys(properties).forEach(function (key) {\n        var value = properties[key];\n        if (typeof value === \"object\") {\n            if (value === null) {\n                // handle null\n                cloned[key] = null;\n            }\n            else if (Array.isArray(value)) {\n                // handle Array\n                cloned[key] = value.map(function (item) {\n                    return item;\n                });\n            }\n            else {\n                // handle generic Object\n                cloned[key] = cloneProperties(value);\n            }\n        }\n        else {\n            cloned[key] = value;\n        }\n    });\n    return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\nfunction cloneFeatureCollection(geojson) {\n    var cloned = { type: \"FeatureCollection\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"features\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add features\n    cloned.features = geojson.features.map(function (feature) {\n        return cloneFeature(feature);\n    });\n    return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\nfunction cloneGeometry(geometry) {\n    var geom = { type: geometry.type };\n    if (geometry.bbox) {\n        geom.bbox = geometry.bbox;\n    }\n    if (geometry.type === \"GeometryCollection\") {\n        geom.geometries = geometry.geometries.map(function (g) {\n            return cloneGeometry(g);\n        });\n        return geom;\n    }\n    geom.coordinates = deepSlice(geometry.coordinates);\n    return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\nfunction deepSlice(coords) {\n    var cloned = coords;\n    if (typeof cloned[0] !== \"object\") {\n        return cloned.slice();\n    }\n    return cloned.map(function (coord) {\n        return deepSlice(coord);\n    });\n}\nexport default clone;\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import {\n  SIZE_UNITS,\n  transformGenomicRangeToStandard,\n  transformGenomicRangeArcToStandard,\n} from \"./vertex-calculator\";\nimport { getViewportForSpecification } from \"./utilities\";\n\nclass GeometryMapper {\n  /**\n   * A class meant to modify data points from the getNextDataPoint method of the {@link Track} object\n   * to geometries that coincide with their visibility on the canvas i.e. with a proper width, height,\n   * x and y. This class is NOT meant to be used by the WebGLDrawer for rendering. It is solely used\n   * by the DataProcessor to properly index the data.\n   *\n   * @param {SpecificationProcessor} specificationObject of the visualization for these geometries\n   * @param {Track} trackObject containing track info for track that these geometries are a part of\n   */\n  constructor(specificationObject, trackObject) {\n    this.specificationObject = specificationObject;\n    this.trackObject = trackObject;\n    this.track = trackObject.track;\n    this.xScale = this.specificationObject.xScale;\n    this.yScale = this.specificationObject.yScale;\n\n    const viewportForSpecification = getViewportForSpecification(\n      specificationObject.specification\n    );\n    if (specificationObject.xScale.isGenomeScale) {\n      this.xDomainWidth = 2 / 2;\n    } else {\n      this.xDomainWidth =\n        (viewportForSpecification[1] - viewportForSpecification[0]) / 2;\n    }\n\n    if (specificationObject.yScale.isGenomeScale) {\n      this.yDomainHeight = 2 / 2;\n    } else {\n      this.yDomainHeight =\n        (viewportForSpecification[3] - viewportForSpecification[2]) / 2;\n    }\n  }\n\n  /**\n   * Modifies a geometry object in place based on the specification.\n   *\n   * @param {Object} geometry an object of the form {dimensions: Array(2), coordinates: Array(2)}\n   */\n  modifyGeometry(geometry) {\n    if (this.xScale.isGenomeScale) {\n      // transforms x part into a standard format\n      if (this.trackObject.track.x.type === \"genomicRange\") {\n        this._modifyGenomicRangeX(geometry);\n      }\n      geometry.coordinates[0] = this.xScale(geometry.coordinates[0]);\n    }\n    this._modifyStandardX(geometry);\n\n    if (this.yScale.isGenomeScale) {\n      // transforms y part into a standard format\n      if (this.trackObject.track.y.type === \"genomicRange\") {\n        this._modifyGenomicRangeY(geometry);\n      }\n      geometry.coordinates[1] = this.yScale(geometry.coordinates[1]);\n    }\n    this._modifyStandardY(geometry);\n  }\n\n  _modifyStandardX(geometry) {\n    if (geometry.dimensions[0]) {\n      // Transform width from the data point into visible width on the canvas\n      geometry.dimensions[0] *= this.xDomainWidth * SIZE_UNITS;\n    }\n\n    // If there is no width, give very small width for flatbush indexing\n    geometry.dimensions[0] = geometry.dimensions[0] || 1e-10;\n  }\n\n  _modifyStandardY(geometry) {\n    if (geometry.dimensions[1]) {\n      // Transform height from the data point into visible height on the canvas\n      geometry.dimensions[1] *= this.yDomainHeight * SIZE_UNITS;\n    }\n\n    // If there is no height, give very small height for flatbush indexing\n    geometry.dimensions[1] = geometry.dimensions[1] || 1e-10;\n  }\n\n  _modifyGenomicRangeX(geometry) {\n    if (this.trackObject.track.mark === \"arc\") {\n      /**\n       * Geometry is in the form\n       * {\n       *   coordinates: [[[chr1,gene1], [chr2,gene2]], <y-coord handled in _modifyGenomicRangeY>]\n       *   dimensions: [[[chr3,gene3], [chr3,gene3]], <height handled in _modifyGenomicRangeY>]\n       * }\n       *\n       * and is transformed to\n       * {\n       *   coordinates: [x-coord between -1 and 1, <y handled elsewhere>]\n       *   dimensions: [width, <height handled elsewhere>]\n       * }\n       */\n      const standardized = transformGenomicRangeArcToStandard(\n        {\n          x: geometry.coordinates[0],\n          y: 0,\n          width: geometry.dimensions[0],\n          height: 0,\n        },\n        this.specificationObject.xScale,\n        this.specificationObject.yScale\n      );\n\n      geometry.coordinates[0] = standardized.x;\n      geometry.dimensions[0] = standardized.width;\n    } else {\n      /**\n       * Geometry is in the form\n       * {\n       *   coordinates: [[[chr1,gene1], [chr2,gene2]], <y-coord handled in _modifyGenomicRangeY>]\n       *   dimensions: [<ignored value>, <height handled elsewhere>]\n       * }\n       *\n       * and is transformed to\n       * {\n       *   coordinates: [x-coord between -1 and 1, <y handled elsewhere>]\n       *   dimensions: [width, <height handled elsewhere>]\n       * }\n       */\n\n      const standardized = transformGenomicRangeToStandard(\n        {\n          x: geometry.coordinates[0],\n          y: 0,\n        },\n        this.specificationObject.xScale,\n        this.specificationObject.yScale\n      );\n      geometry.coordinates[0] = standardized.x;\n      geometry.dimensions[0] = standardized.width;\n    }\n  }\n\n  _modifyGenomicRangeY(geometry) {\n    // See comments in _modifyGenomicRangeX\n\n    if (this.trackObject.track.mark === \"arc\") {\n      const standardized = transformGenomicRangeArcToStandard(\n        {\n          x: 0,\n          y: geometry.coordinates[1],\n          width: 0,\n          height: geometry.coordinates[1],\n        },\n        this.specificationObject.xScale,\n        this.specificationObject.yScale\n      );\n\n      geometry.coordinates[1] = standardized.y;\n      geometry.dimensions[1] = standardized.height;\n    } else {\n      const standardized = transformGenomicRangeToStandard(\n        {\n          x: 0,\n          y: geometry.coordinates[1],\n        },\n        this.specificationObject.xScale,\n        this.specificationObject.yScale\n      );\n      geometry.coordinates[1] = standardized.y;\n      geometry.dimensions[1] = standardized.height;\n    }\n  }\n}\n\nexport default GeometryMapper;\n"],"names":[],"version":3,"file":"data-processor-worker.ea1be877.js.map"}