{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/epiviz.gl/drawer.js","./src/epiviz.gl/semantic-zoomer.js","./src/epiviz.gl/webgl.js","./node_modules/twgl.js/dist/4.x/twgl-full.module.js","./src/epiviz.gl/webgl-drawer.js","./src/epiviz.gl/offscreen-webgl-worker.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","class Drawer {\n  /**\n   * An interface for drawing on a canvas.\n   *\n   * @param {Object} drawingData object containing keys for {@link Drawer#receiveViewport}\n   *  and canvas key used for drawing.\n   */\n  constructor(drawingData) {\n    this.canvas = drawingData.canvas;\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.receiveViewport(drawingData);\n  }\n\n  /**\n   * Method to set the viewport for the drawer.\n   *\n   * @param {Object} viewportData object containing minX,maxX,minY,maxY,xRange,yRange viewport data for drawer\n   */\n  receiveViewport(viewportData) {\n    this.minX = viewportData.minX;\n    this.maxX = viewportData.maxX;\n    this.minY = viewportData.minY;\n    this.maxY = viewportData.maxY;\n    this.currentXRange = viewportData.xRange;\n    this.currentYRange = viewportData.yRange;\n\n    this.needsAnimation = true;\n  }\n\n  /**\n   * Method to implement which signifies a frame has been processed. Used to\n   * display FPS meter.\n   */\n  tick() {}\n\n  /**\n   * Method to implement animating a frame.\n   */\n  animate() {}\n\n  /**\n   * Method to implement preprocessing for rendering frames.\n   */\n  render() {\n    if (this.lastFrame) {\n      // Avoid overlapping animation requests\n      cancelAnimationFrame(this.lastFrame);\n    }\n  }\n}\n\nexport default Drawer;\n","import { GenomeScale } from \"./genome-sizes\";\n\nconst sizeOfGeneRangeForTriangles = 20000000;\n\nclass SemanticZoomer {\n  /**\n   * Gives guidance or takes control over canvas when semantic zooming\n   * is necessary. Developers should extend this class to create semantic zooming\n   * behavior.\n   * @param {SchemaProcessor} schemaHelper\n   */\n  constructor(schemaHelper) {\n    this.schemaHelper = schemaHelper;\n  }\n\n  getRecommendedDrawingMode(trackShader, currentXRange, currentYRange) {\n    if (trackShader.drawMode !== \"TRIANGLES\") {\n      return trackShader.drawMode;\n    }\n\n    if (\n      !(this.schemaHelper.xScale instanceof GenomeScale) &&\n      !(this.schemaHelper.yScale instanceof GenomeScale)\n    ) {\n      // Currently only used for genome tracks\n      return \"TRIANGLES\";\n    }\n    if (this.schemaHelper.xScale instanceof GenomeScale) {\n      const numberOfGenes =\n        this.schemaHelper.xScale.mapGenomeIndexToClipSpaceInverse(\n          currentXRange[1]\n        ) -\n        this.schemaHelper.xScale.mapGenomeIndexToClipSpaceInverse(\n          currentXRange[0]\n        );\n      if (numberOfGenes < sizeOfGeneRangeForTriangles) {\n        return \"TRIANGLES\";\n      }\n    }\n    if (this.schemaHelper.yScale instanceof GenomeScale) {\n      const numberOfGenes =\n        this.schemaHelper.yScale.mapGenomeIndexToClipSpaceInverse(\n          currentYRange[1]\n        ) -\n        this.schemaHelper.yScale.mapGenomeIndexToClipSpaceInverse(\n          currentYRange[0]\n        );\n      if (numberOfGenes < sizeOfGeneRangeForTriangles) {\n        return \"TRIANGLES\";\n      }\n    }\n\n    return \"LINES\";\n  }\n}\n\nexport default SemanticZoomer;\n","import { DEFAULT_CHANNELS, getDrawModeForTrack } from \"./schema-processor\";\nimport { colorSpecifierToHex } from \"./utilities\";\n\n/**\n * A vertex shader meant to take in positions, colors, and contain uniforms for zooming and panning.\n */\nconst baseVertexShader = `#version 300 es\n  precision highp float;\n\n  in vec2 a_VertexPosition;\n\n  uniform float pointSizeModifier;\n  // [x1, y1,x2, y2] of viewing window\n  uniform vec4 viewport;\n\n  out vec4 vColor;\n`;\n\n/**\n * Appended to end of vertex shader. Includes math for zooming and panning,\n * ability to unpack colors and send to fragment shader.\n */\nconst vertexShaderSuffix = (opacityName, colorName, sizeName) => `\n  vec3 unpackColor(float f) {\n    vec3 colorVec;\n    colorVec.r = floor(f / 65536.0);\n    colorVec.g = floor((f - colorVec.r * 65536.0) / 256.0);\n    colorVec.b = floor(f - colorVec.r * 65536.0 - colorVec.g * 256.0);\n    return colorVec / 256.0;\n  }\n\n  void main(void) {\n    // Subtract each vertex by midpoint of the viewport \n    // window to center points. Then scale by ratio of max window size to window size\n    gl_Position = vec4(\n       (a_VertexPosition.x - (viewport.z + viewport.x)/2.0) * 2.0/(viewport.z - viewport.x),\n       (a_VertexPosition.y - (viewport.w + viewport.y)/2.0) * 2.0/(viewport.w - viewport.y),\n        0,\n        1\n    );\n    vec3 unpackedValues = unpackColor(${colorName});\n\n    vColor = vec4(\n      unpackedValues.rgb,\n      ${opacityName}\n    );\n    gl_PointSize = ${sizeName} * pointSizeModifier;\n  }\n`;\n\n/**\n * A fragment shader which chooses color simply passed to by vertex shader.\n */\nconst varyingColorsFragmentShader = `#version 300 es\n  precision highp float;\n\n  in vec4 vColor;\n\n  out vec4 outColor;\n  void main(void) {\n    outColor = vColor;\n  }\n`;\n\nclass VertexShader {\n  static SUPPORTED_CHANNEL_ATTRIBUTES = Object.freeze([\n    \"color\",\n    \"size\",\n    \"opacity\",\n  ]);\n\n  /**\n   * A class meant to contain all the relevant information for a shader program, such as uniforms\n   * attributes, and ultimately the vertices. Do not use the constructor. Use VertexShader.fromSchema\n   * or fromTrack instead.\n   */\n  constructor() {\n    this.shader = baseVertexShader;\n    this.uniforms = {};\n\n    // Add position buffers here since x and y channels don't map nicely to shader code\n    this.attributes = {\n      a_VertexPosition: {\n        numComponents: 2,\n        data: [],\n      },\n    };\n  }\n\n  /**\n   * Add a mark to the buffers by calculating its vertices, then adding its\n   * attributes such as size, color, or opacity to the buffers.\n   *\n   * @param {Object} mark passed in from SchemaHelper in webgl-drawer.js\n   * @param {VertexCalculator} vertexCalculator used to calculate vertices for a track\n   */\n  addMarkToBuffers(mark, vertexCalculator) {\n    const vertices = vertexCalculator.calculateForMark(mark);\n    this.attributes.a_VertexPosition.data.push(...vertices);\n\n    for (const channel of Object.keys(this.attributes)) {\n      if (channel === \"a_VertexPosition\") {\n        // handled above\n        continue;\n      }\n\n      for (let i = 0; i < vertices.length / 2; i++) {\n        this.attributes[channel].data.push(mark[channel.substring(2)]); // Remove \"a_\" prefix\n      }\n    }\n\n    this.lastMark = mark;\n  }\n\n  /**\n   * Set the webgl draw mode to use\n   * @param {String} drawMode\n   */\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n  }\n\n  /**\n   * Signify this channel varies from mark to mark, so build buffers to carry this info\n   * for the program. Also add desclaration to shader code.\n   *\n   * @param {String} channel such as opacity, color, size\n   * @param {Number} numComponents number of components of this attribute to pull in, usually 1\n   * @returns this\n   */\n  addChannelBuffer(channel, numComponents = 1) {\n    this.attributes[`a_${channel}`] = { numComponents, data: [] };\n    this.shader += `in float a_${channel};\\n`;\n    return this;\n  }\n\n  /**\n   * Signify this channel is the same for every mark, so set a uniform to refer to.\n   *\n   * @param {String} channel such as opacity, color, size\n   * @param {Number} uniform value to set uniform to, must be a float\n   * @returns this\n   */\n  setChannelUniform(channel, uniform) {\n    this.uniforms[`u_${channel}`] = uniform;\n    this.shader += `uniform float u_${channel};\\n`;\n    return this;\n  }\n\n  /**\n   * Build the shader code after uniforms and attributes have been finalized.\n   *\n   * @returns shader code to compile\n   */\n  buildShader() {\n    // Assumes color, opacity, size channels have been used in\n    // addChannelBuffer or addChannelUniform\n    if (this.built) {\n      return this.shader;\n    }\n\n    const colorName = \"a_color\" in this.attributes ? \"a_color\" : \"u_color\";\n    const opacityName =\n      \"a_opacity\" in this.attributes ? \"a_opacity\" : \"u_opacity\";\n    const sizeName = \"a_size\" in this.attributes ? \"a_size\" : \"u_size\";\n\n    this.shader += vertexShaderSuffix(opacityName, colorName, sizeName);\n    this.built = true;\n    return this.shader;\n  }\n\n  /**\n   * Construct the vertex shaders for each track in the schema.\n   *\n   * @param {Object} schema of visualization\n   * @returns an array of {@link VertexShaders}s\n   */\n  static fromSchema(schema) {\n    // Returns one per track\n    return schema.tracks.map(VertexShader.fromTrack);\n  }\n\n  /**\n   * Construct the vertex shader a track including setting attributes, uniforms, drawMode.\n   *\n   * @param {Object} track from schema\n   * @returns a {@link VertexShaders}\n   */\n  static fromTrack(track) {\n    // Given a track produce attributes and uniforms that describe a webgl drawing\n\n    const vsBuilder = new VertexShader();\n    vsBuilder.setDrawMode(getDrawModeForTrack(track));\n\n    for (let channel of Object.keys(DEFAULT_CHANNELS)) {\n      if (channel === \"shape\") {\n        // Changes vertex positions and draw mode, does not change shader code\n        continue;\n      }\n      if (channel in track) {\n        // Schema specifies channel\n        if (track[channel].value) {\n          // Channel has default value\n          if (channel === \"color\") {\n            track[channel].value = colorSpecifierToHex(track[channel].value);\n          }\n          vsBuilder.setChannelUniform(channel, track[channel].value);\n        } else {\n          // Set Channel as attribute, x and y will always reach here\n          if (channel === \"y\" || channel === \"x\") {\n            // Skip for x and y as handled in constructor\n            continue;\n          }\n\n          // These are currently the only supported channels for shader usage\n          if (VertexShader.SUPPORTED_CHANNEL_ATTRIBUTES.includes(channel)) {\n            vsBuilder.addChannelBuffer(\n              channel,\n              DEFAULT_CHANNELS[channel].numComponents\n            );\n          }\n        }\n      } else {\n        // Channel not listed, set default\n        if (VertexShader.SUPPORTED_CHANNEL_ATTRIBUTES.includes(channel)) {\n          vsBuilder.setChannelUniform(channel, DEFAULT_CHANNELS[channel].value);\n        }\n      }\n    }\n\n    return vsBuilder;\n  }\n}\n\nexport { varyingColorsFragmentShader, VertexShader };\n","/* @license twgl.js 4.19.1 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 16, setter: floatMat2Setter,  };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 36, setter: floatMat3Setter,  };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 24, setter: floatMat23Setter, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 24, setter: floatMat32Setter, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 32, setter: floatMat42Setter, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 48, setter: floatMat43Setter, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  const errFn = opt_errorCallback || error$1;\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n\n  // Load the shader source\n  gl.shaderSource(shader, shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n  }\n\n  const options = {\n    errorCallback: opt_errorCallback || error$1,\n    transformFeedbackVaryings: transformFeedbackVaryings,\n    transformFeedbackMode: transformFeedbackMode,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n  gl.linkProgram(program);\n\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(`${\n      realShaders.map(shader => {\n        const src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);\n        const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);\n        return `${glEnumToString(gl, type)}\\n${src}}`;\n      }).join('\\n')\n    }\\nError in program linking: ${lastError}`);\n\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n  return program;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, opt_errorCallback) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    throw new Error(`unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(\n        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = { };\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n        continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      uniformSetters[name] = createUniformSetter(program, uniformInfo, location);\n    }\n  }\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      break;\n    }\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, Type, typeSize, paddedSize, isArray) {\n  if (isArray) {\n    const numElements = typeSize / Type.BYTES_PER_ELEMENT;\n    const numPaddedElements = paddedSize / Type.BYTES_PER_ELEMENT;\n    return function(value) {\n      let dst = 0;\n      for (let src = 0; src < value.length; src += numElements) {\n        for (let i = 0; i < numElements; ++i) {\n          view[dst + i] = value[src + i];\n        }\n        dst += numPaddedElements;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const paddedSize = pad(typeInfo.size, 16);\n    const length = typeInfo.size + (data.size - 1) * paddedSize;\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const uniformView = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    setters[name] = createUniformBlockUniformSetter(uniformView, Type, typeInfo.size, paddedSize, isArray);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, values) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = arguments.length;\n  for (let aNdx = 1; aNdx < numArgs; ++aNdx) {\n    const values = arguments[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n        continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  let good = true;\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      const script = getElementById(source);\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (!good) {\n    return null;\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\nconst DEPTH_COMPONENT24$1              = 0x81a6;\nconst DEPTH_COMPONENT32F$1             = 0x8cac;\nconst DEPTH24_STENCIL8$1               = 0x88f0;\nconst DEPTH32F_STENCIL8$1              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE$1                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  let colorAttachmentCount = 0;\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n  attachments.forEach(function(attachmentOptions) {\n    let attachment = attachmentOptions.attachment;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    if (isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","import Drawer from \"./drawer\";\nimport SchemaProcessor from \"./schema-processor\";\nimport { scale } from \"./utilities\";\nimport VertexCalculator from \"./vertex-calculator\";\nimport SemanticZoomer from \"./semantic-zoomer\";\nimport { VertexShader, varyingColorsFragmentShader } from \"./webgl.js\";\n\nconst twgl = require(\"twgl.js\");\n\nconst ALL_POTENTIAL_ATTRIBUTES = VertexShader.SUPPORTED_CHANNEL_ATTRIBUTES.map(\n  (attr) => `a_${attr}`\n).concat(\"a_VertexPosition\");\n\nclass WebGLCanvasDrawer extends Drawer {\n  constructor(viewportData) {\n    super(viewportData);\n\n    this.gl = this.canvas.getContext(\"webgl2\", {\n      // Setting these to false makes webgl handle more like opengl\n      // Source: https://webglfundamentals.org/webgl/lessons/webgl-and-alpha.html\n      alpha: false,\n      premultipliedAlpha: false,\n    });\n\n    if (!this.gl) {\n      console.error(\"Unable to initialize WebGL!\");\n      return;\n    }\n  }\n\n  /**\n   * Calculates the viewport for this.gl.viewport to control zooming. Also calculates point size.\n   * @returns Array of 5 elements, first 4 are viewport parameters, last is pointSizeMultiplier:\n   *   [xOffset, yOffset, displayAsIfThisWide, displayAsIfThisHigh, pointSizeMultiplier]\n   */\n  getWebGLViewport() {\n    // Calculate appropriate webgl viewport given current selection window\n\n    // Transform current data coordinates to GPU cordinates\n    const scaleXWindowSpace = scale([this.minX, this.maxX], [-1, 1]);\n    const scaleYWindowSpace = scale([this.minY, this.maxY], [-1, 1]);\n\n    // Multiply point size by the ratio of max dimension and current width\n    const pointSize = Math.max(\n      1,\n      Math.min(\n        1 /\n          (scaleXWindowSpace(this.currentXRange[1]) -\n            scaleXWindowSpace(this.currentXRange[0])),\n        1 /\n          (scaleYWindowSpace(this.currentYRange[1]) -\n            scaleYWindowSpace(this.currentYRange[0]))\n      )\n    );\n    // Return [x1, y1, x2, y2] and pointsize, camera corners coordinates in GPU space\n    // Which becomes uniform in vertex shader\n    return [\n      scaleXWindowSpace(this.currentXRange[0]),\n      scaleYWindowSpace(this.currentYRange[0]),\n      scaleXWindowSpace(this.currentXRange[1]),\n      scaleYWindowSpace(this.currentYRange[1]),\n      pointSize,\n    ];\n  }\n\n  /**\n   * Sets the schema and begins the process of drawing it.\n   *  1. Cancels any current animation\n   *  2. Builds shaders for the tracks\n   *  3. After data is loaded, calls populateBuffers.\n   *\n   * @param {Object} schema of visualization\n   */\n  setSchema(schema) {\n    super.render(); // Cancels current animation frame\n\n    // Populate buffers needs a trackShader built to know what buffers to fill\n    this.trackShaders = VertexShader.fromSchema(schema);\n\n    new SchemaProcessor(schema, this.populateBuffers.bind(this));\n  }\n\n  /**\n   * Populate the buffers that are fed to webgl for drawing.\n   *\n   * @param {SchemaProcessor} schemaHelper created in the setSchema method\n   */\n  populateBuffers(schemaHelper) {\n    let currentTrack = schemaHelper.getNextTrack();\n    let currentTrackShaderIndex = 0;\n\n    this.semanticZoomer = new SemanticZoomer(schemaHelper);\n\n    while (currentTrack) {\n      // Construct calculator in track loop as calculator keeps internal state for each track\n      let vertexCalculator = new VertexCalculator(\n        schemaHelper.xScale,\n        schemaHelper.yScale,\n        currentTrack.track // Access actual track schema\n      );\n\n      let currentMark = currentTrack.getNextMark();\n\n      while (currentMark) {\n        // A lot of the heavy lifting occurs in the track shaders, this class is mostly boilerplate for webgl\n        this.trackShaders[currentTrackShaderIndex].addMarkToBuffers(\n          currentMark,\n          vertexCalculator\n        );\n\n        currentMark = currentTrack.getNextMark();\n      }\n\n      currentTrack = schemaHelper.getNextTrack();\n      currentTrackShaderIndex++;\n    }\n\n    this.render();\n  }\n\n  /**\n   * Animates the frames by setting viewport, uniforms, blending, clearing, and calling webgl draw.\n   */\n  animate() {\n    if (!this.needsAnimation) {\n      // Prevent pointless animation if canvas does not change\n      this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n      this.tick();\n      return;\n    }\n\n    const viewport = this.getWebGLViewport();\n    this.globalUniforms.viewport = new Float32Array(viewport.slice(0, 4));\n    this.globalUniforms.pointSizeModifier = viewport[4];\n\n    // Clear the canvas before we start drawing on it.\n    this.gl.clearColor(1, 1, 1, 1);\n\n    // Set the blending function\n    // Blend functions are weird, play with them:\n    // https://mrdoob.github.io/webgl-blendfunctions/blendfunc.html\n    // http://www.andersriggelsen.dk/glblendfunc.php\n    this.gl.enable(this.gl.BLEND);\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    // For each track shader, use their shader program then draw it\n    this.trackShaders.forEach((trackShader, index) => {\n      this.gl.useProgram(this.programInfos[index].program);\n\n      twgl.setUniforms(this.programInfos[index], {\n        ...this.globalUniforms,\n        ...trackShader.uniforms,\n      });\n\n      twgl.setBuffersAndAttributes(\n        this.gl,\n        this.programInfos[index],\n        this.vertexArrayInfos[index]\n      );\n\n      twgl.drawBufferInfo(\n        this.gl,\n        this.vertexArrayInfos[index],\n        this.gl[\n          this.semanticZoomer.getRecommendedDrawingMode(\n            trackShader,\n            this.currentXRange,\n            this.currentYRange\n          )\n        ],\n        trackShader.attributes.a_VertexPosition.data.length / 2\n      );\n    });\n\n    this.needsAnimation = false;\n    this.lastFrame = requestAnimationFrame(this.animate.bind(this));\n    this.tick();\n  }\n\n  /**\n   * Prepares animation by compiling shaders, setting uniforms, constructing buffers,\n   * and handling additional boilerplate.\n   */\n  render() {\n    super.render();\n\n    this.programInfos = this.trackShaders.map((trackShader) =>\n      twgl.createProgramInfo(\n        this.gl,\n        [trackShader.buildShader(), varyingColorsFragmentShader],\n        ALL_POTENTIAL_ATTRIBUTES\n      )\n    );\n\n    this.globalUniforms = {\n      viewport: new Float32Array([-1, -1, 1, 1]),\n      pointSizeModifier: 1,\n    };\n\n    this.vertexArrayInfos = this.trackShaders.map((trackShader) =>\n      twgl.createVertexArrayInfo(\n        this.gl,\n        this.programInfos,\n        twgl.createBufferInfoFromArrays(this.gl, trackShader.attributes)\n      )\n    );\n\n    this.needsAnimation = true;\n    this.animate();\n  }\n}\n\nexport default WebGLCanvasDrawer;\n","/**\n * The offscreen webgl worker is meant to communicate from the {@link WebGLVis}\n * by sending a schema data to the drawer for management of shader program and\n * eventually drawing. Most messages passed are containing the new viewport\n * information for the drawer to process.\n */\nimport WebGLDrawer from \"./webgl-drawer\";\n\nclass OffscreenWebGLDrawer extends WebGLDrawer {\n  tick() {\n    postMessage({ type: \"tick\" });\n  }\n}\n\nself.onmessage = (message) => {\n  switch (message.data.type) {\n    case \"init\":\n      self.drawer = new OffscreenWebGLDrawer(message.data);\n      break;\n    case \"viewport\":\n      self.drawer.receiveViewport(message.data);\n      break;\n    case \"render\":\n      self.drawer.receiveViewport(message.data);\n      self.drawer.render();\n      break;\n    case \"schema\":\n      self.drawer.setSchema(message.data.schema);\n      break;\n    case \"clearBuffers\":\n      self.drawer.clearBuffers();\n      break;\n    case \"resize\":\n      self.drawer.canvas.width = message.data.width;\n      self.drawer.canvas.height = message.data.height;\n      self.drawer.gl.viewport(0, 0, message.data.width, message.data.height);\n      break;\n    default:\n      console.error(`Received unknown message type: ${message.type}`);\n  }\n};\n"],"names":["$parcel$global","globalThis","self","window","global","constructor","drawingData","canvas","width","height","receiveViewport","viewportData","minX","maxX","minY","maxY","currentXRange","xRange","currentYRange","yRange","needsAnimation","tick","animate","render","lastFrame","cancelAnimationFrame","$5c6650abbf803aceaee251e2c8e111c9$var$sizeOfGeneRangeForTriangles","schemaHelper","getRecommendedDrawingMode","trackShader","drawMode","xScale","yScale","numberOfGenes","mapGenomeIndexToClipSpaceInverse","$5aa01963e4773c466fc995fbb6f57ffb$var$baseVertexShader","$5aa01963e4773c466fc995fbb6f57ffb$var$vertexShaderSuffix","opacityName","colorName","sizeName","$5aa01963e4773c466fc995fbb6f57ffb$export$varyingColorsFragmentShader","SUPPORTED_CHANNEL_ATTRIBUTES","Object","freeze","shader","uniforms","attributes","a_VertexPosition","numComponents","data","addMarkToBuffers","mark","vertexCalculator","vertices","calculateForMark","push","channel","keys","i","length","substring","lastMark","setDrawMode","addChannelBuffer","setChannelUniform","uniform","buildShader","built","fromSchema","schema","tracks","map","$5aa01963e4773c466fc995fbb6f57ffb$export$VertexShader","fromTrack","track","vsBuilder","value","includes","$52d13d33bd60c65a724bfd448491637f$var$VecType","Float32Array","ctor","oldType","x","y","z","dst","a","b","t","Math","max","min","v","k","t1","t2","sqrt","dx","dy","dz","lenSq","len","$52d13d33bd60c65a724bfd448491637f$export$v3","__proto__","add","$52d13d33bd60c65a724bfd448491637f$var$add","copy","$52d13d33bd60c65a724bfd448491637f$var$copy","create","$52d13d33bd60c65a724bfd448491637f$var$create","cross","$52d13d33bd60c65a724bfd448491637f$var$cross","distance","$52d13d33bd60c65a724bfd448491637f$var$distance","distanceSq","$52d13d33bd60c65a724bfd448491637f$var$distanceSq","divide","$52d13d33bd60c65a724bfd448491637f$var$divide","divScalar","$52d13d33bd60c65a724bfd448491637f$var$divScalar","dot","$52d13d33bd60c65a724bfd448491637f$var$dot","lerp","$52d13d33bd60c65a724bfd448491637f$var$lerp","lerpV","$52d13d33bd60c65a724bfd448491637f$var$lerpV","$52d13d33bd60c65a724bfd448491637f$var$length$1","lengthSq","$52d13d33bd60c65a724bfd448491637f$var$lengthSq","$52d13d33bd60c65a724bfd448491637f$var$max","$52d13d33bd60c65a724bfd448491637f$var$min","mulScalar","$52d13d33bd60c65a724bfd448491637f$var$mulScalar","multiply","$52d13d33bd60c65a724bfd448491637f$var$multiply","negate","$52d13d33bd60c65a724bfd448491637f$var$negate","normalize","$52d13d33bd60c65a724bfd448491637f$var$normalize","setDefaultType","$52d13d33bd60c65a724bfd448491637f$var$setDefaultType","subtract","$52d13d33bd60c65a724bfd448491637f$var$subtract","$52d13d33bd60c65a724bfd448491637f$var$MatType","m","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t3","d","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","$52d13d33bd60c65a724bfd448491637f$var$identity","axis","off","$52d13d33bd60c65a724bfd448491637f$var$copy$1","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","PI","rangeInv","left","right","bottom","top","near","far","$52d13d33bd60c65a724bfd448491637f$var$xAxis","$52d13d33bd60c65a724bfd448491637f$var$yAxis","$52d13d33bd60c65a724bfd448491637f$var$zAxis","eye","target","up","v0","v1","v2","angleInRadians","c","cos","s","sin","n","xx","yy","zz","oneMinusCosine","r00","r01","r02","r10","r11","r12","r20","r21","r22","mi","$52d13d33bd60c65a724bfd448491637f$var$inverse","$52d13d33bd60c65a724bfd448491637f$export$m4","axisRotate","$52d13d33bd60c65a724bfd448491637f$var$axisRotate","axisRotation","$52d13d33bd60c65a724bfd448491637f$var$axisRotation","frustum","$52d13d33bd60c65a724bfd448491637f$var$frustum","getAxis","$52d13d33bd60c65a724bfd448491637f$var$getAxis","getTranslation","$52d13d33bd60c65a724bfd448491637f$var$getTranslation","identity","inverse","lookAt","$52d13d33bd60c65a724bfd448491637f$var$lookAt","$52d13d33bd60c65a724bfd448491637f$var$multiply$1","$52d13d33bd60c65a724bfd448491637f$var$negate$1","ortho","$52d13d33bd60c65a724bfd448491637f$var$ortho","perspective","$52d13d33bd60c65a724bfd448491637f$var$perspective","rotateX","$52d13d33bd60c65a724bfd448491637f$var$rotateX","rotateY","$52d13d33bd60c65a724bfd448491637f$var$rotateY","rotateZ","$52d13d33bd60c65a724bfd448491637f$var$rotateZ","rotationX","$52d13d33bd60c65a724bfd448491637f$var$rotationX","rotationY","$52d13d33bd60c65a724bfd448491637f$var$rotationY","rotationZ","$52d13d33bd60c65a724bfd448491637f$var$rotationZ","scale","$52d13d33bd60c65a724bfd448491637f$var$scale","scaling","$52d13d33bd60c65a724bfd448491637f$var$scaling","setAxis","$52d13d33bd60c65a724bfd448491637f$var$setAxis","$52d13d33bd60c65a724bfd448491637f$var$setDefaultType$1","setTranslation","$52d13d33bd60c65a724bfd448491637f$var$setTranslation","transformDirection","$52d13d33bd60c65a724bfd448491637f$var$transformDirection","transformNormal","$52d13d33bd60c65a724bfd448491637f$var$transformNormal","transformPoint","$52d13d33bd60c65a724bfd448491637f$var$transformPoint","translate","$52d13d33bd60c65a724bfd448491637f$var$translate","translation","$52d13d33bd60c65a724bfd448491637f$var$translation","transpose","$52d13d33bd60c65a724bfd448491637f$var$transpose","$52d13d33bd60c65a724bfd448491637f$var$BYTE","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_BYTE","$52d13d33bd60c65a724bfd448491637f$var$SHORT","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT","$52d13d33bd60c65a724bfd448491637f$var$INT","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT","$52d13d33bd60c65a724bfd448491637f$var$FLOAT","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT_4_4_4_4","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT_5_5_5_1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT_5_6_5","$52d13d33bd60c65a724bfd448491637f$var$HALF_FLOAT","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_2_10_10_10_REV","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_10F_11F_11F_REV","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_5_9_9_9_REV","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_32_UNSIGNED_INT_24_8_REV","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_24_8","$52d13d33bd60c65a724bfd448491637f$var$glTypeToTypedArray","tt","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","typedArray","Uint8ClampedArray","Error","typedArrayType","type","CTOR","$52d13d33bd60c65a724bfd448491637f$export$isArrayBuffer","SharedArrayBuffer","buffer","ArrayBuffer","$52d13d33bd60c65a724bfd448491637f$export$typedarrays","getGLTypeForTypedArray","$52d13d33bd60c65a724bfd448491637f$export$getGLTypeForTypedArray","getGLTypeForTypedArrayType","$52d13d33bd60c65a724bfd448491637f$export$getGLTypeForTypedArrayType","getTypedArrayTypeForGLType","$52d13d33bd60c65a724bfd448491637f$export$getTypedArrayTypeForGLType","isArrayBuffer","names","src","forEach","name","undefined","key","hasOwnProperty","args","console","error","warn","gl","WebGLBuffer","WebGLRenderbuffer","WebGLShader","WebGLTexture","WebGLSampler","$52d13d33bd60c65a724bfd448491637f$var$STATIC_DRAW","$52d13d33bd60c65a724bfd448491637f$var$ARRAY_BUFFER","$52d13d33bd60c65a724bfd448491637f$var$ELEMENT_ARRAY_BUFFER","$52d13d33bd60c65a724bfd448491637f$var$BUFFER_SIZE","$52d13d33bd60c65a724bfd448491637f$var$BYTE$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_BYTE$1","$52d13d33bd60c65a724bfd448491637f$var$SHORT$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT$1","$52d13d33bd60c65a724bfd448491637f$var$INT$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT$1","$52d13d33bd60c65a724bfd448491637f$var$FLOAT$1","$52d13d33bd60c65a724bfd448491637f$var$defaults","attribPrefix","prefix","newDefaults","$52d13d33bd60c65a724bfd448491637f$var$copyExistingProperties","array","drawType","bindBuffer","bufferData","$52d13d33bd60c65a724bfd448491637f$var$isBuffer","createBuffer","$52d13d33bd60c65a724bfd448491637f$var$setBufferFromTypedArray","$52d13d33bd60c65a724bfd448491637f$var$texcoordRE","$52d13d33bd60c65a724bfd448491637f$var$colorRE","test","arrayName","size","$52d13d33bd60c65a724bfd448491637f$var$guessNumComponentsFromName","$52d13d33bd60c65a724bfd448491637f$export$getArray_","Array","isArray","Type","$52d13d33bd60c65a724bfd448491637f$var$isIndices","arrays","attribs","attribName","attrib","normalization","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","$52d13d33bd60c65a724bfd448491637f$var$getNormalizationForTypedArrayType","$52d13d33bd60c65a724bfd448491637f$var$makeTypedArray","$52d13d33bd60c65a724bfd448491637f$export$createBufferFromTypedArray","$52d13d33bd60c65a724bfd448491637f$var$getNormalizationForTypedArray","$52d13d33bd60c65a724bfd448491637f$export$getNumComponents_","stride","offset","divisor","attribInfo","bufferSubData","$52d13d33bd60c65a724bfd448491637f$var$positionKeys","ii","numElements","getBufferParameter","bytesPerValue","$52d13d33bd60c65a724bfd448491637f$var$getBytesPerValueForGLType","totalElements","srcBufferInfo","newAttribs","$52d13d33bd60c65a724bfd448491637f$export$createAttribsFromArrays","bufferInfo","assign","indices","newIndices","elementType","$52d13d33bd60c65a724bfd448491637f$var$getNumElementsFromAttributes","buffers","$52d13d33bd60c65a724bfd448491637f$export$createBufferFromArray","$52d13d33bd60c65a724bfd448491637f$var$getNumElementsFromNonIndexedArrays","$52d13d33bd60c65a724bfd448491637f$export$attributes","createAttribsFromArrays","createBuffersFromArrays","$52d13d33bd60c65a724bfd448491637f$export$createBuffersFromArrays","createBufferFromArray","createBufferFromTypedArray","createBufferInfoFromArrays","$52d13d33bd60c65a724bfd448491637f$export$createBufferInfoFromArrays","setAttribInfoBufferFromArray","$52d13d33bd60c65a724bfd448491637f$export$setAttribInfoBufferFromArray","setAttributePrefix","$52d13d33bd60c65a724bfd448491637f$export$setAttributePrefix","setAttributeDefaults_","$52d13d33bd60c65a724bfd448491637f$export$setAttributeDefaults_","getNumComponents_","getArray_","$52d13d33bd60c65a724bfd448491637f$var$getArray$1","$52d13d33bd60c65a724bfd448491637f$var$getNumComponents$1","cursor","arguments","jj","reset","opt_index","defineProperty","get","opt_type","$52d13d33bd60c65a724bfd448491637f$var$augmentTypedArray","newVertices","srcBuffer","dstBuffer","$52d13d33bd60c65a724bfd448491637f$var$createAugmentedTypedArray","ndx","filter","$52d13d33bd60c65a724bfd448491637f$var$allButIndices","expandToUnindexed","normals","normal","numNormals","nax","nay","naz","nbx","nby","nbz","ncx","ncy","ncz","nx","ny","nz","matrix","fn","tmp","$52d13d33bd60c65a724bfd448491637f$var$applyFuncToV3Array","$52d13d33bd60c65a724bfd448491637f$var$transformNormal$1","indexOf","$52d13d33bd60c65a724bfd448491637f$var$reorientPositions","$52d13d33bd60c65a724bfd448491637f$var$reorientDirections","$52d13d33bd60c65a724bfd448491637f$var$reorientNormals","xOffset","yOffset","position","texcoord","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","texcoords","u","numVertsAcross","$52d13d33bd60c65a724bfd448491637f$var$reorientVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","numVertsAround","$52d13d33bd60c65a724bfd448491637f$var$CUBE_FACE_INDICES","cornerVertices","faceNormals","uvCoords","faceIndices","uv","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","start","end","ringRadius","rleData","padding","runLength","element","slice","apply","$52d13d33bd60c65a724bfd448491637f$var$expandRLEData","colors","numVerts","color","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","subdivisionsThick","offsetRange","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","px","py","pz","createArc","leftArcOffset","rightArcOffset","numVerticesDown","createSurface","$52d13d33bd60c65a724bfd448491637f$var$createTruncatedConeVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ring","ringAngle","xSin","zCos","nextRingIndex","nextSliceIndex","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","random","options","vColors","rand","$52d13d33bd60c65a724bfd448491637f$var$randInt","numVertsPerColor","vertsPerColor","numSets","prototype","call","$52d13d33bd60c65a724bfd448491637f$var$arraySpecPropertyNames","dstNdx","srcArray","arraySrc","newArray","newArraySpec","$52d13d33bd60c65a724bfd448491637f$var$copyNamedProperties","arrayOfArrays","baseName","arrayInfo","arraySpec","spec","base","baseIndex","$52d13d33bd60c65a724bfd448491637f$var$copyElements","newArrays","info","getLengthOfCombinedArrays","$52d13d33bd60c65a724bfd448491637f$var$createArrayOfSameType","copyArraysToNewArray","$52d13d33bd60c65a724bfd448491637f$var$create3DFBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createBufferInfoFunc","$52d13d33bd60c65a724bfd448491637f$var$create3DFVertices","$52d13d33bd60c65a724bfd448491637f$var$create3DFBuffers","$52d13d33bd60c65a724bfd448491637f$var$createBufferFunc","$52d13d33bd60c65a724bfd448491637f$var$createCubeBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createCubeVertices","$52d13d33bd60c65a724bfd448491637f$var$createCubeBuffers","$52d13d33bd60c65a724bfd448491637f$var$createPlaneBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createPlaneVertices","$52d13d33bd60c65a724bfd448491637f$var$createPlaneBuffers","$52d13d33bd60c65a724bfd448491637f$var$createSphereBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createSphereVertices","$52d13d33bd60c65a724bfd448491637f$var$createSphereBuffers","$52d13d33bd60c65a724bfd448491637f$var$createTruncatedConeBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createTruncatedConeBuffers","$52d13d33bd60c65a724bfd448491637f$var$createXYQuadBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createXYQuadVertices","$52d13d33bd60c65a724bfd448491637f$var$createXYQuadBuffers","$52d13d33bd60c65a724bfd448491637f$var$createCrescentBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createCrescentVertices","$52d13d33bd60c65a724bfd448491637f$var$createCrescentBuffers","$52d13d33bd60c65a724bfd448491637f$var$createCylinderBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createCylinderVertices","$52d13d33bd60c65a724bfd448491637f$var$createCylinderBuffers","$52d13d33bd60c65a724bfd448491637f$var$createTorusBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createTorusVertices","$52d13d33bd60c65a724bfd448491637f$var$createTorusBuffers","$52d13d33bd60c65a724bfd448491637f$var$createDiscBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createDiscVertices","$52d13d33bd60c65a724bfd448491637f$var$createDiscBuffers","$52d13d33bd60c65a724bfd448491637f$var$createCresentBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$createCresentBuffers","$52d13d33bd60c65a724bfd448491637f$var$createCresentVertices","$52d13d33bd60c65a724bfd448491637f$export$primitives","create3DFBufferInfo","create3DFBuffers","create3DFVertices","createAugmentedTypedArray","createCubeBufferInfo","createCubeBuffers","createCubeVertices","createPlaneBufferInfo","createPlaneBuffers","createPlaneVertices","createSphereBufferInfo","createSphereBuffers","createSphereVertices","createTruncatedConeBufferInfo","createTruncatedConeBuffers","createTruncatedConeVertices","createXYQuadBufferInfo","createXYQuadBuffers","createXYQuadVertices","createCresentBufferInfo","createCresentBuffers","createCresentVertices","createCrescentBufferInfo","createCrescentBuffers","createCrescentVertices","createCylinderBufferInfo","createCylinderBuffers","createCylinderVertices","createTorusBufferInfo","createTorusBuffers","createTorusVertices","createDiscBufferInfo","createDiscBuffers","createDiscVertices","deindexVertices","$52d13d33bd60c65a724bfd448491637f$var$deindexVertices","flattenNormals","$52d13d33bd60c65a724bfd448491637f$var$flattenNormals","makeRandomVertexColors","$52d13d33bd60c65a724bfd448491637f$var$makeRandomVertexColors","reorientDirections","reorientNormals","reorientPositions","reorientVertices","concatVertices","$52d13d33bd60c65a724bfd448491637f$var$concatVertices","duplicateVertices","$52d13d33bd60c65a724bfd448491637f$var$duplicateVertices","texStorage2D","$52d13d33bd60c65a724bfd448491637f$export$glEnumToString","haveEnumsForType","enums","existing","addEnums","toString","$52d13d33bd60c65a724bfd448491637f$export$utils","glEnumToString","isWebGL1","$52d13d33bd60c65a724bfd448491637f$export$isWebGL1","isWebGL2","$52d13d33bd60c65a724bfd448491637f$export$isWebGL2","$52d13d33bd60c65a724bfd448491637f$var$defaults$1","textureColor","textureOptions","crossOrigin","$52d13d33bd60c65a724bfd448491637f$var$isArrayBuffer$1","$52d13d33bd60c65a724bfd448491637f$var$getShared2DContext","s_ctx","document","createElement","getContext","$52d13d33bd60c65a724bfd448491637f$var$ALPHA","$52d13d33bd60c65a724bfd448491637f$var$RGB","$52d13d33bd60c65a724bfd448491637f$var$RGBA","$52d13d33bd60c65a724bfd448491637f$var$LUMINANCE","$52d13d33bd60c65a724bfd448491637f$var$LUMINANCE_ALPHA","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_STENCIL","$52d13d33bd60c65a724bfd448491637f$var$CLAMP_TO_EDGE","$52d13d33bd60c65a724bfd448491637f$var$NEAREST","$52d13d33bd60c65a724bfd448491637f$var$LINEAR","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_2D","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_3D","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_2D_ARRAY","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP_POSITIVE_X","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP_NEGATIVE_X","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP_POSITIVE_Y","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP_NEGATIVE_Y","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP_POSITIVE_Z","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP_NEGATIVE_Z","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_MIN_FILTER","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_MAG_FILTER","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_WRAP_S","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_WRAP_T","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_WRAP_R","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_MIN_LOD","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_MAX_LOD","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_BASE_LEVEL","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_MAX_LEVEL","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_ALIGNMENT","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_ROW_LENGTH","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_IMAGE_HEIGHT","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_SKIP_PIXELS","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_SKIP_ROWS","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_SKIP_IMAGES","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_COLORSPACE_CONVERSION_WEBGL","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_PREMULTIPLY_ALPHA_WEBGL","$52d13d33bd60c65a724bfd448491637f$var$UNPACK_FLIP_Y_WEBGL","$52d13d33bd60c65a724bfd448491637f$var$R8","$52d13d33bd60c65a724bfd448491637f$var$R8_SNORM","$52d13d33bd60c65a724bfd448491637f$var$R16F","$52d13d33bd60c65a724bfd448491637f$var$R32F","$52d13d33bd60c65a724bfd448491637f$var$R8UI","$52d13d33bd60c65a724bfd448491637f$var$R8I","$52d13d33bd60c65a724bfd448491637f$var$RG16UI","$52d13d33bd60c65a724bfd448491637f$var$RG16I","$52d13d33bd60c65a724bfd448491637f$var$RG32UI","$52d13d33bd60c65a724bfd448491637f$var$RG32I","$52d13d33bd60c65a724bfd448491637f$var$RG8","$52d13d33bd60c65a724bfd448491637f$var$RG8_SNORM","$52d13d33bd60c65a724bfd448491637f$var$RG16F","$52d13d33bd60c65a724bfd448491637f$var$RG32F","$52d13d33bd60c65a724bfd448491637f$var$RG8UI","$52d13d33bd60c65a724bfd448491637f$var$RG8I","$52d13d33bd60c65a724bfd448491637f$var$R16UI","$52d13d33bd60c65a724bfd448491637f$var$R16I","$52d13d33bd60c65a724bfd448491637f$var$R32UI","$52d13d33bd60c65a724bfd448491637f$var$R32I","$52d13d33bd60c65a724bfd448491637f$var$RGB8","$52d13d33bd60c65a724bfd448491637f$var$SRGB8","$52d13d33bd60c65a724bfd448491637f$var$RGB565","$52d13d33bd60c65a724bfd448491637f$var$RGB8_SNORM","$52d13d33bd60c65a724bfd448491637f$var$R11F_G11F_B10F","$52d13d33bd60c65a724bfd448491637f$var$RGB9_E5","$52d13d33bd60c65a724bfd448491637f$var$RGB16F","$52d13d33bd60c65a724bfd448491637f$var$RGB32F","$52d13d33bd60c65a724bfd448491637f$var$RGB8UI","$52d13d33bd60c65a724bfd448491637f$var$RGB8I","$52d13d33bd60c65a724bfd448491637f$var$RGB16UI","$52d13d33bd60c65a724bfd448491637f$var$RGB16I","$52d13d33bd60c65a724bfd448491637f$var$RGB32UI","$52d13d33bd60c65a724bfd448491637f$var$RGB32I","$52d13d33bd60c65a724bfd448491637f$var$RGBA8","$52d13d33bd60c65a724bfd448491637f$var$SRGB8_ALPHA8","$52d13d33bd60c65a724bfd448491637f$var$RGBA8_SNORM","$52d13d33bd60c65a724bfd448491637f$var$RGB5_A1","$52d13d33bd60c65a724bfd448491637f$var$RGBA4","$52d13d33bd60c65a724bfd448491637f$var$RGB10_A2","$52d13d33bd60c65a724bfd448491637f$var$RGBA16F","$52d13d33bd60c65a724bfd448491637f$var$RGBA32F","$52d13d33bd60c65a724bfd448491637f$var$RGBA8UI","$52d13d33bd60c65a724bfd448491637f$var$RGBA8I","$52d13d33bd60c65a724bfd448491637f$var$RGB10_A2UI","$52d13d33bd60c65a724bfd448491637f$var$RGBA16UI","$52d13d33bd60c65a724bfd448491637f$var$RGBA16I","$52d13d33bd60c65a724bfd448491637f$var$RGBA32I","$52d13d33bd60c65a724bfd448491637f$var$RGBA32UI","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT16","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT24","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT32F","$52d13d33bd60c65a724bfd448491637f$var$DEPTH32F_STENCIL8","$52d13d33bd60c65a724bfd448491637f$var$DEPTH24_STENCIL8","$52d13d33bd60c65a724bfd448491637f$var$BYTE$2","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_BYTE$2","$52d13d33bd60c65a724bfd448491637f$var$SHORT$2","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT$2","$52d13d33bd60c65a724bfd448491637f$var$INT$2","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT$2","$52d13d33bd60c65a724bfd448491637f$var$FLOAT$2","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT_4_4_4_4$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT_5_5_5_1$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT_5_6_5$1","$52d13d33bd60c65a724bfd448491637f$var$HALF_FLOAT$1","$52d13d33bd60c65a724bfd448491637f$var$HALF_FLOAT_OES","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_2_10_10_10_REV$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_10F_11F_11F_REV$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_5_9_9_9_REV$1","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_32_UNSIGNED_INT_24_8_REV$1","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_24_8$1","$52d13d33bd60c65a724bfd448491637f$var$RG","$52d13d33bd60c65a724bfd448491637f$var$RG_INTEGER","$52d13d33bd60c65a724bfd448491637f$var$RED","$52d13d33bd60c65a724bfd448491637f$var$RED_INTEGER","$52d13d33bd60c65a724bfd448491637f$var$RGB_INTEGER","$52d13d33bd60c65a724bfd448491637f$var$RGBA_INTEGER","$52d13d33bd60c65a724bfd448491637f$var$formatInfo","numColorComponents","$52d13d33bd60c65a724bfd448491637f$var$s_textureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","$52d13d33bd60c65a724bfd448491637f$var$getTextureInternalFormatInfo","format","$52d13d33bd60c65a724bfd448491637f$var$isPowerOf2","defaultType","$52d13d33bd60c65a724bfd448491637f$export$setDefaultTextureColor","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","parameteriFn","minMag","mag","wrap","$52d13d33bd60c65a724bfd448491637f$var$isSampler","wrapR","wrapS","wrapT","minLod","maxLod","baseLevel","maxLevel","tex","bindTexture","$52d13d33bd60c65a724bfd448491637f$var$setTextureSamplerParameters","texParameteri","sampler","samplerParameteri","createSampler","$52d13d33bd60c65a724bfd448491637f$export$setSamplerParameters","samplerOptions","samplers","$52d13d33bd60c65a724bfd448491637f$export$createSampler","$52d13d33bd60c65a724bfd448491637f$export$canGenerateMipmap","generateMipmap","filtering","$52d13d33bd60c65a724bfd448491637f$export$canFilter","auto","level","cubeFaceOrder","faces","$52d13d33bd60c65a724bfd448491637f$var$getCubeFaceOrder","facesWithNdx","face","sort","formatType","$52d13d33bd60c65a724bfd448491637f$export$getFormatAndTypeForInternalFormat","$52d13d33bd60c65a724bfd448491637f$var$setPackState","imgWidth","imgHeight","slices","nodeName","ctx","$52d13d33bd60c65a724bfd448491637f$var$getCubeFacesWithNdx","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","$52d13d33bd60c65a724bfd448491637f$var$shouldAutomaticallySetTextureFilteringForSize","$52d13d33bd60c65a724bfd448491637f$export$setTextureFilteringForSize","smallest","largest","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","$52d13d33bd60c65a724bfd448491637f$var$setSkipStateToDefault","$52d13d33bd60c65a724bfd448491637f$export$setTextureParameters","url","href","hostname","location","port","protocol","localOrigin","URL","origin","urlOrigin","$52d13d33bd60c65a724bfd448491637f$var$urlIsSameOrigin","callback","$52d13d33bd60c65a724bfd448491637f$var$noop","img","$52d13d33bd60c65a724bfd448491637f$var$setToAnonymousIfUndefinedAndURLIsNotSameOrigin","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","$52d13d33bd60c65a724bfd448491637f$var$error","addEventListener","ImageBitmap","err","bm","cb","mode","fetch","response","ok","blob","bitmap","setTimeout","catch","e","obj","ImageData","HTMLElement","$52d13d33bd60c65a724bfd448491637f$var$isTexImageSource","$52d13d33bd60c65a724bfd448491637f$var$loadImage","$52d13d33bd60c65a724bfd448491637f$var$make1Pixel","$52d13d33bd60c65a724bfd448491637f$var$setTextureTo1PixelColor","$52d13d33bd60c65a724bfd448491637f$var$loadAndUseImage","$52d13d33bd60c65a724bfd448491637f$export$setTextureFromElement","urls","numToLoad","errors","imgs","faceTarget","otherTarget","uploadImg","firstImage","$52d13d33bd60c65a724bfd448491637f$var$getTextureTypeForArrayType","$52d13d33bd60c65a724bfd448491637f$export$getBytesPerElementForInternalFormat","byteLength","dimensions","cbrt","$52d13d33bd60c65a724bfd448491637f$var$guessDimensions","unpackAlignment","elementsPerElement","faceSize","subarray","createTexture","$52d13d33bd60c65a724bfd448491637f$export$loadTextureFromUrl","$52d13d33bd60c65a724bfd448491637f$export$setTextureFromArray","$52d13d33bd60c65a724bfd448491637f$var$loadCubemapFromUrls","$52d13d33bd60c65a724bfd448491637f$var$loadSlicesFromUrls","$52d13d33bd60c65a724bfd448491637f$export$setEmptyTexture","numDownloading","textures","images","onLoadFn","$52d13d33bd60c65a724bfd448491637f$var$isAsyncSrc","callCallbackIfReady","$52d13d33bd60c65a724bfd448491637f$export$createTexture","$52d13d33bd60c65a724bfd448491637f$export$textures","setTextureDefaults_","$52d13d33bd60c65a724bfd448491637f$export$setTextureDefaults_","createSamplers","$52d13d33bd60c65a724bfd448491637f$export$createSamplers","setSamplerParameters","setEmptyTexture","setTextureFromArray","loadTextureFromUrl","setTextureFromElement","setTextureFilteringForSize","setTextureParameters","setDefaultTextureColor","createTextures","$52d13d33bd60c65a724bfd448491637f$export$createTextures","resizeTexture","$52d13d33bd60c65a724bfd448491637f$export$resizeTexture","canGenerateMipmap","canFilter","getNumComponentsForFormat","$52d13d33bd60c65a724bfd448491637f$export$getNumComponentsForFormat","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","$52d13d33bd60c65a724bfd448491637f$var$error$1","$52d13d33bd60c65a724bfd448491637f$var$warn$1","$52d13d33bd60c65a724bfd448491637f$var$warn","id","getElementById","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE0","$52d13d33bd60c65a724bfd448491637f$var$DYNAMIC_DRAW","$52d13d33bd60c65a724bfd448491637f$var$ARRAY_BUFFER$1","$52d13d33bd60c65a724bfd448491637f$var$ELEMENT_ARRAY_BUFFER$1","$52d13d33bd60c65a724bfd448491637f$var$UNIFORM_BUFFER","$52d13d33bd60c65a724bfd448491637f$var$TRANSFORM_FEEDBACK_BUFFER","$52d13d33bd60c65a724bfd448491637f$var$TRANSFORM_FEEDBACK","$52d13d33bd60c65a724bfd448491637f$var$COMPILE_STATUS","$52d13d33bd60c65a724bfd448491637f$var$LINK_STATUS","$52d13d33bd60c65a724bfd448491637f$var$FRAGMENT_SHADER","$52d13d33bd60c65a724bfd448491637f$var$VERTEX_SHADER","$52d13d33bd60c65a724bfd448491637f$var$SEPARATE_ATTRIBS","$52d13d33bd60c65a724bfd448491637f$var$ACTIVE_UNIFORMS","$52d13d33bd60c65a724bfd448491637f$var$ACTIVE_ATTRIBUTES","$52d13d33bd60c65a724bfd448491637f$var$TRANSFORM_FEEDBACK_VARYINGS","$52d13d33bd60c65a724bfd448491637f$var$ACTIVE_UNIFORM_BLOCKS","$52d13d33bd60c65a724bfd448491637f$var$UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","$52d13d33bd60c65a724bfd448491637f$var$UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","$52d13d33bd60c65a724bfd448491637f$var$UNIFORM_BLOCK_DATA_SIZE","$52d13d33bd60c65a724bfd448491637f$var$UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","$52d13d33bd60c65a724bfd448491637f$var$FLOAT$3","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_VEC2","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_VEC3","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_VEC4","$52d13d33bd60c65a724bfd448491637f$var$INT$3","$52d13d33bd60c65a724bfd448491637f$var$INT_VEC2","$52d13d33bd60c65a724bfd448491637f$var$INT_VEC3","$52d13d33bd60c65a724bfd448491637f$var$INT_VEC4","$52d13d33bd60c65a724bfd448491637f$var$BOOL","$52d13d33bd60c65a724bfd448491637f$var$BOOL_VEC2","$52d13d33bd60c65a724bfd448491637f$var$BOOL_VEC3","$52d13d33bd60c65a724bfd448491637f$var$BOOL_VEC4","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT2","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT3","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT4","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_2D","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_CUBE","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_3D","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_2D_SHADOW","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT2x3","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT2x4","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT3x2","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT3x4","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT4x2","$52d13d33bd60c65a724bfd448491637f$var$FLOAT_MAT4x3","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_2D_ARRAY","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_2D_ARRAY_SHADOW","$52d13d33bd60c65a724bfd448491637f$var$SAMPLER_CUBE_SHADOW","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT$3","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_VEC2","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_VEC3","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_VEC4","$52d13d33bd60c65a724bfd448491637f$var$INT_SAMPLER_2D","$52d13d33bd60c65a724bfd448491637f$var$INT_SAMPLER_3D","$52d13d33bd60c65a724bfd448491637f$var$INT_SAMPLER_CUBE","$52d13d33bd60c65a724bfd448491637f$var$INT_SAMPLER_2D_ARRAY","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_SAMPLER_2D","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_SAMPLER_3D","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_SAMPLER_CUBE","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_INT_SAMPLER_2D_ARRAY","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_2D$1","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_CUBE_MAP$1","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_3D$1","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_2D_ARRAY$1","$52d13d33bd60c65a724bfd448491637f$var$typeMap","bindPoint","uniform1f","uniform1fv","uniform2fv","uniform3fv","uniform4fv","uniform1i","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix3x2fv","uniformMatrix2x4fv","uniformMatrix4x2fv","uniformMatrix3x4fv","uniformMatrix4x3fv","unit","$52d13d33bd60c65a724bfd448491637f$var$getBindPointForSamplerType","textureOrPair","texture","$52d13d33bd60c65a724bfd448491637f$var$isTexture","activeTexture","bindSampler","units","index","setter","$52d13d33bd60c65a724bfd448491637f$var$floatSetter","arraySetter","$52d13d33bd60c65a724bfd448491637f$var$floatArraySetter","$52d13d33bd60c65a724bfd448491637f$var$floatVec2Setter","$52d13d33bd60c65a724bfd448491637f$var$floatVec3Setter","$52d13d33bd60c65a724bfd448491637f$var$floatVec4Setter","$52d13d33bd60c65a724bfd448491637f$var$intSetter","$52d13d33bd60c65a724bfd448491637f$var$intArraySetter","$52d13d33bd60c65a724bfd448491637f$var$intVec2Setter","$52d13d33bd60c65a724bfd448491637f$var$intVec3Setter","$52d13d33bd60c65a724bfd448491637f$var$intVec4Setter","$52d13d33bd60c65a724bfd448491637f$var$uintSetter","$52d13d33bd60c65a724bfd448491637f$var$uintArraySetter","$52d13d33bd60c65a724bfd448491637f$var$uintVec2Setter","$52d13d33bd60c65a724bfd448491637f$var$uintVec3Setter","$52d13d33bd60c65a724bfd448491637f$var$uintVec4Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat2Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat3Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat4Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat23Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat24Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat32Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat34Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat42Setter","$52d13d33bd60c65a724bfd448491637f$var$floatMat43Setter","$52d13d33bd60c65a724bfd448491637f$var$samplerSetter","$52d13d33bd60c65a724bfd448491637f$var$samplerArraySetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","vertexAttrib4iv","vertexAttribIPointer","vertexAttrib4uiv","typeInfo","defaultSize","count","rowOffset","$52d13d33bd60c65a724bfd448491637f$var$attrTypeMap","$52d13d33bd60c65a724bfd448491637f$var$floatAttribSetter","$52d13d33bd60c65a724bfd448491637f$var$intAttribSetter","$52d13d33bd60c65a724bfd448491637f$var$uintAttribSetter","$52d13d33bd60c65a724bfd448491637f$var$matAttribSetter","$52d13d33bd60c65a724bfd448491637f$var$errorRE","log","lineOffset","matches","matchAll","lineNoToErrorMap","Map","lineNo","parseInt","next","split","line","join","$52d13d33bd60c65a724bfd448491637f$var$spaceRE","shaderSource","shaderType","opt_errorCallback","errFn","createShader","replace","compileShader","compiled","getShaderParameter","lastError","getShaderInfoLog","$52d13d33bd60c65a724bfd448491637f$var$addLineNumbersWithError","deleteShader","opt_attribs","opt_locations","transformFeedbackVaryings","transformFeedbackMode","errorCallback","opt","attribLocations","$52d13d33bd60c65a724bfd448491637f$var$defaultShaderType","scriptType","shaders","progOptions","$52d13d33bd60c65a724bfd448491637f$var$getProgramOptions","realShaders","newShaders","elem","$52d13d33bd60c65a724bfd448491637f$var$getElementById","text","$52d13d33bd60c65a724bfd448491637f$var$getShaderTypeFromScriptType","$52d13d33bd60c65a724bfd448491637f$var$loadShader","$52d13d33bd60c65a724bfd448491637f$var$isShader","$52d13d33bd60c65a724bfd448491637f$var$deleteShaders","program","createProgram","attachShader","bindAttribLocation","varyings","linkProgram","linked","getProgramParameter","getProgramInfoLog","getShaderSource","SHADER_TYPE","deleteProgram","scriptId","opt_shaderType","shaderScript","shaderScriptIds","$52d13d33bd60c65a724bfd448491637f$var$createShaderFromScript","$52d13d33bd60c65a724bfd448491637f$export$createProgram","shaderSources","startsWith","textureUnit","uniformInfo","endsWith","uniformSetters","numUniforms","getActiveUniform","$52d13d33bd60c65a724bfd448491637f$var$isBuiltIn","substr","getUniformLocation","createUniformSetter","numVaryings","varying","getTransformFeedbackVarying","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","programInfo","tf","createTransformFeedback","bindTransformFeedback","useProgram","$52d13d33bd60c65a724bfd448491637f$export$bindTransformFeedbackInfo","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","$52d13d33bd60c65a724bfd448491637f$var$arraySuffixRE","$52d13d33bd60c65a724bfd448491637f$var$pad","view","typeSize","paddedSize","numPaddedElements","set","uniformBlockSpec","blockName","uniformBufferIndex","uniformBlockBinding","setters","uniformNdx","uniformView","$52d13d33bd60c65a724bfd448491637f$var$createUniformBlockUniformSetter","asFloat","$52d13d33bd60c65a724bfd448491637f$export$createUniformBlockInfoFromProgram","uniformBlockInfo","bufferBindIndex","$52d13d33bd60c65a724bfd448491637f$export$bindUniformBlock","values","actualSetters","numArgs","aNdx","$52d13d33bd60c65a724bfd448491637f$export$setUniforms","$52d13d33bd60c65a724bfd448491637f$export$setUniformsAndBindTextures","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","vertexArrayObject","bindVertexArray","$52d13d33bd60c65a724bfd448491637f$export$setAttributes","$52d13d33bd60c65a724bfd448491637f$export$createUniformSetters","$52d13d33bd60c65a724bfd448491637f$export$createAttributeSetters","$52d13d33bd60c65a724bfd448491637f$export$createUniformBlockSpecFromProgram","$52d13d33bd60c65a724bfd448491637f$export$createTransformFeedbackInfo","good","source","script","$52d13d33bd60c65a724bfd448491637f$export$createProgramFromSources","$52d13d33bd60c65a724bfd448491637f$export$createProgramInfoFromProgram","$52d13d33bd60c65a724bfd448491637f$export$programs","createAttributeSetters","createProgramFromScripts","$52d13d33bd60c65a724bfd448491637f$export$createProgramFromScripts","createProgramFromSources","createProgramInfo","$52d13d33bd60c65a724bfd448491637f$export$createProgramInfo","createProgramInfoFromProgram","createUniformSetters","createUniformBlockSpecFromProgram","createUniformBlockInfoFromProgram","createUniformBlockInfo","$52d13d33bd60c65a724bfd448491637f$export$createUniformBlockInfo","$52d13d33bd60c65a724bfd448491637f$export$createTransformFeedback","createTransformFeedbackInfo","bindTransformFeedbackInfo","setAttributes","setBuffersAndAttributes","$52d13d33bd60c65a724bfd448491637f$export$setBuffersAndAttributes","setUniforms","setUniformsAndBindTextures","setUniformBlock","$52d13d33bd60c65a724bfd448491637f$export$setUniformBlock","setBlockUniforms","$52d13d33bd60c65a724bfd448491637f$export$setBlockUniforms","bindUniformBlock","$52d13d33bd60c65a724bfd448491637f$var$TRIANGLES","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_SHORT$3","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","vertexArrayInfo","bindBuffers","$52d13d33bd60c65a724bfd448491637f$export$drawBufferInfo","$52d13d33bd60c65a724bfd448491637f$export$draw","drawBufferInfo","drawObjectList","$52d13d33bd60c65a724bfd448491637f$export$drawObjectList","$52d13d33bd60c65a724bfd448491637f$var$FRAMEBUFFER","$52d13d33bd60c65a724bfd448491637f$var$RENDERBUFFER","$52d13d33bd60c65a724bfd448491637f$var$TEXTURE_2D$2","$52d13d33bd60c65a724bfd448491637f$var$UNSIGNED_BYTE$3","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT$1","$52d13d33bd60c65a724bfd448491637f$var$RGBA$1","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT24$1","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT32F$1","$52d13d33bd60c65a724bfd448491637f$var$DEPTH24_STENCIL8$1","$52d13d33bd60c65a724bfd448491637f$var$DEPTH32F_STENCIL8$1","$52d13d33bd60c65a724bfd448491637f$var$RGBA4$1","$52d13d33bd60c65a724bfd448491637f$var$RGB5_A1$1","$52d13d33bd60c65a724bfd448491637f$var$RGB565$1","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_COMPONENT16$1","$52d13d33bd60c65a724bfd448491637f$var$STENCIL_INDEX","$52d13d33bd60c65a724bfd448491637f$var$STENCIL_INDEX8","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_STENCIL$1","$52d13d33bd60c65a724bfd448491637f$var$COLOR_ATTACHMENT0","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_ATTACHMENT","$52d13d33bd60c65a724bfd448491637f$var$STENCIL_ATTACHMENT","$52d13d33bd60c65a724bfd448491637f$var$DEPTH_STENCIL_ATTACHMENT","$52d13d33bd60c65a724bfd448491637f$var$CLAMP_TO_EDGE$1","$52d13d33bd60c65a724bfd448491637f$var$LINEAR$1","$52d13d33bd60c65a724bfd448491637f$var$defaultAttachments","$52d13d33bd60c65a724bfd448491637f$var$attachmentsByFormat","$52d13d33bd60c65a724bfd448491637f$var$renderbufferFormats","attachments","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","$52d13d33bd60c65a724bfd448491637f$var$getAttachmentPointForFormat","$52d13d33bd60c65a724bfd448491637f$var$isRenderbufferFormat","createRenderbuffer","bindRenderbuffer","renderbufferStorage","$52d13d33bd60c65a724bfd448491637f$var$isRenderbuffer","framebufferRenderbuffer","layer","framebufferTextureLayer","framebufferTexture2D","viewport","$52d13d33bd60c65a724bfd448491637f$export$framebuffers","bindFramebufferInfo","$52d13d33bd60c65a724bfd448491637f$export$bindFramebufferInfo","createFramebufferInfo","$52d13d33bd60c65a724bfd448491637f$export$createFramebufferInfo","resizeFramebufferInfo","$52d13d33bd60c65a724bfd448491637f$export$resizeFramebufferInfo","$52d13d33bd60c65a724bfd448491637f$var$ELEMENT_ARRAY_BUFFER$2","programInfos","vao","createVertexArray","$52d13d33bd60c65a724bfd448491637f$export$createVAOAndSetAttributes","$52d13d33bd60c65a724bfd448491637f$export$vertexArrays","createVertexArrayInfo","$52d13d33bd60c65a724bfd448491637f$export$createVertexArrayInfo","createVAOAndSetAttributes","createVAOFromBufferInfo","$52d13d33bd60c65a724bfd448491637f$export$createVAOFromBufferInfo","$52d13d33bd60c65a724bfd448491637f$var$defaults$2","addExtensionsToContext","$52d13d33bd60c65a724bfd448491637f$var$prefixRE","extensionName","ext","getExtension","fnSuffix","exec","enumSuffix","isFunc","suffix","origFn","$52d13d33bd60c65a724bfd448491637f$var$supportedExtensions","$52d13d33bd60c65a724bfd448491637f$var$addExtensionToContext","context","$52d13d33bd60c65a724bfd448491637f$export$addExtensionsToContext","$52d13d33bd60c65a724bfd448491637f$var$create3DContext","$52d13d33bd60c65a724bfd448491637f$var$createContext","multiplier","clientWidth","clientHeight","$2b3199d0d5be952e84d95e8de105dfa8$var$ALL_POTENTIAL_ATTRIBUTES","attr","concat","alpha","premultipliedAlpha","getWebGLViewport","scaleXWindowSpace","scaleYWindowSpace","pointSize","setSchema","trackShaders","populateBuffers","bind","currentTrack","getNextTrack","currentTrackShaderIndex","semanticZoomer","currentMark","getNextMark","requestAnimationFrame","globalUniforms","pointSizeModifier","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clear","COLOR_BUFFER_BIT","vertexArrayInfos","postMessage","onmessage","message","drawer","$6021bf8496a435d417583f6626e5a56a$var$OffscreenWebGLDrawer","clearBuffers"],"version":3,"file":"offscreen-webgl-worker.a5a92e26.js.map"}